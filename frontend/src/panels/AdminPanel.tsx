import {
  Panel,
  PanelHeader,
  NavIdProps,
  Group,
  CardGrid,
  Card,
  Header,
  Spinner,
  Div,
  Button,
  PanelHeaderBack,
  ButtonGroup,
  Link,
  Snackbar,
  Alert,
  ModalRoot,
  ModalPage,
  ModalPageHeader,
  FormLayoutGroup,
  Input,
  Textarea,
  FormItem,
  Select,
  Search,
  Cell,
  Tabs,
  TabsItem,
  SimpleCell,
  Text,
  Subhead,
  Counter,
  Badge,
  RichCell,
  Avatar,
  Separator
} from '@vkontakte/vkui';
import { useRouteNavigator } from '@vkontakte/vk-mini-apps-router';
import { FC, useState, useEffect, ReactNode } from 'react';
import { API_URL } from '../api';
import { exportAnketaToJson, downloadJsonFile } from '../utils/anketaExport';
import { Icon24CheckCircleOutline, Icon24ErrorCircle, Icon24Add, Icon24Download, Icon24Settings, Icon24Users, Icon24MoneyCircle, Icon24Gift } from '@vkontakte/icons';

interface Character {
  id: number;
  character_name: string;
  vk_id: number;
  status: string;
  rank: string;
  faction: string;
  faction_position: string;
}

interface MarketItem {
  id: number;
  name: string;
  description: string;
  price: number;
  item_type: '–û–±—ã—á–Ω—ã–π' | '–°–∏–Ω–∫–∏';
  item_data: {
    sinki_type?: '–û—Å–∫–æ–ª–æ–∫' | '–§–æ–∫—É—Å' | '–≠—Ö–æ';
    rank?: 'F' | 'E' | 'D' | 'C' | 'B' | 'A' | 'S' | 'SS' | 'SSS';
  };
  image_url: string;
  quantity: number;
}

interface Update {
 id: number;
 character_id: number;
 status: string;
 character_name: string;
}

const MODAL_PAGE_MARKET_ITEM = 'market_item';

export const AdminPanel: FC<NavIdProps> = ({ id }) => {
  const routeNavigator = useRouteNavigator();
  const [characters, setCharacters] = useState<Character[]>([]);
  const [marketItems, setMarketItems] = useState<MarketItem[]>([]);
  const [updates, setUpdates] = useState<Update[]>([]);
  const [loading, setLoading] = useState({ characters: true, items: true, updates: true });
  const [snackbar, setSnackbar] = useState<ReactNode | null>(null);
  const [popout, setPopout] = useState<ReactNode | null>(null);
  const [activeModal, setActiveModal] = useState<string | null>(null);
  const [editingItem, setEditingItem] = useState<Partial<MarketItem> | null>(null);
  const [characterSearch, setCharacterSearch] = useState('');
  const [itemSearch, setItemSearch] = useState('');
  const [activeTab, setActiveTab] = useState<'overview' | 'characters' | 'market' | 'crypto' | 'purchases' | 'collections' | 'updates' | 'bulk'>('overview');

  const handleBackup = async () => {
    try {
      showResultSnackbar('–ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ...', true);
      const response = await fetch(`${API_URL}/admin/backup`);
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
      }
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.style.display = 'none';
      a.href = url;
      
      const contentDisposition = response.headers.get('content-disposition');
      let filename = 'backup.db';
      if (contentDisposition) {
          const filenameMatch = contentDisposition.match(/filename="(.+)"/);
          if (filenameMatch && filenameMatch.length === 2) {
              filename = filenameMatch[1];
          }
      }
      
      a.download = filename;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      a.remove();
      showResultSnackbar('–ë—ç–∫–∞–ø —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω!', true);
    } catch (error) {
      console.error('Backup download failed:', error);
      const message = error instanceof Error ? error.message : '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –±—ç–∫–∞–ø';
      showResultSnackbar(message, false);
    }
  };

  const fetchCharacters = async () => {
    try {
      const response = await fetch(`${API_URL}/characters`);
      const data = await response.json();
      setCharacters(data);
    } catch (error) {
      console.error('Failed to fetch characters:', error);
      showResultSnackbar('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–Ω–∫–µ—Ç—ã', false);
    } finally {
      setLoading(prev => ({ ...prev, characters: false }));
    }
  };

  const fetchMarketItems = async () => {
    try {
      const response = await fetch(`${API_URL}/market/items`);
      const data = await response.json();
      setMarketItems(data);
    } catch (error) {
      console.error('Failed to fetch market items:', error);
      showResultSnackbar('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã', false);
    } finally {
      setLoading(prev => ({ ...prev, items: false }));
    }
  };

  const fetchUpdates = async () => {
   try {
     const response = await fetch(`${API_URL}/updates`);
     const data = await response.json();
     setUpdates(data);
   } catch (error) {
     console.error('Failed to fetch updates:', error);
      showResultSnackbar('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è', false);
   } finally {
     setLoading(prev => ({ ...prev, updates: false }));
   }
  };

  useEffect(() => {
    fetchCharacters();
    fetchMarketItems();
    fetchUpdates();
  }, []);

  const showResultSnackbar = (text: string, isSuccess: boolean) => {
    setSnackbar(
      <Snackbar
        onClose={() => setSnackbar(null)}
        before={isSuccess ? <Icon24CheckCircleOutline fill="var(--vkui--color_icon_positive)" /> : <Icon24ErrorCircle fill="var(--vkui--color_icon_negative)" />}
      >
        {text}
      </Snackbar>
    );
  };

  const handleLogout = () => {
    localStorage.removeItem('adminId');
    routeNavigator.push('/');
  };

  const handleSaveMarketItem = async () => {
    if (!editingItem) return;

    try {
      const response = await fetch(`${API_URL}/market/items`, {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          'x-admin-id': localStorage.getItem('adminId') || '',
        },
        body: JSON.stringify(editingItem),
      });

      if (response.ok) {
        showResultSnackbar('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω', true);
        setActiveModal(null);
        setEditingItem(null);
        fetchMarketItems();
      } else {
        const errorData = await response.json();
        showResultSnackbar(errorData.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞', false);
      }
    } catch (error) {
      showResultSnackbar('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏', false);
    }
  };

  const filteredCharacters = characters.filter(char =>
    char.character_name.toLowerCase().includes(characterSearch.toLowerCase()) ||
    char.faction.toLowerCase().includes(characterSearch.toLowerCase())
  );

  const filteredMarketItems = marketItems.filter(item =>
    item.name.toLowerCase().includes(itemSearch.toLowerCase())
  );

  const renderOverviewTab = () => (
    <>
      <Group header={<Header>üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</Header>}>
        <CardGrid size="l">
          <Card>
            <SimpleCell
              before={<Icon24Users />}
              after={<Counter mode="primary">{characters.length}</Counter>}
            >
              <Text weight="2">–í—Å–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π</Text>
              <Subhead>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤ —Å–∏—Å—Ç–µ–º–µ</Subhead>
            </SimpleCell>
          </Card>
          <Card>
            <SimpleCell
              after={<Counter mode="primary">{marketItems.length}</Counter>}
            >
              <Text weight="2">–¢–æ–≤–∞—Ä–æ–≤ –≤ –º–∞—Ä–∫–µ—Ç–µ</Text>
              <Subhead>–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏</Subhead>
            </SimpleCell>
          </Card>
          <Card>
            <SimpleCell
              after={<Counter mode="primary">{updates.length}</Counter>}
            >
              <Text weight="2">–û–∂–∏–¥–∞—é—â–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π</Text>
              <Subhead>–í –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É</Subhead>
            </SimpleCell>
          </Card>
        </CardGrid>
      </Group>

      <Group header={<Header>üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏</Header>}>
        <Div>
          <ButtonGroup stretched mode="vertical" gap="m">
            <Button 
              size="l" 
              mode="primary" 
              onClick={handleBackup}
              before={<Icon24Download />}
            >
              üíæ –°–∫–∞—á–∞—Ç—å –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            </Button>
            <Button 
              size="l" 
              mode="secondary" 
              onClick={async () => {
                try {
                  const response = await fetch(`${API_URL}/admin/collections/fix-rarity`, { method: 'POST' });
                  const data = await response.json();
                  showResultSnackbar(data.message || '–†–µ–¥–∫–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', true);
    } catch (error) {
                  showResultSnackbar('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–¥–∫–æ—Å—Ç–µ–π', false);
                }
              }}
              before={<Icon24Settings />}
            >
              üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–¥–∫–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            </Button>
          </ButtonGroup>
        </Div>
      </Group>

      <Group header={<Header>üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API</Header>}>
        <Div>
          <Text style={{ marginBottom: 16, color: 'var(--vkui--color_text_secondary)' }}>
            –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –≤—Å–µ—Ö API endpoints –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ Swagger UI
          </Text>
          <Button 
            size="l" 
            mode="outline" 
            onClick={() => window.open(`${API_URL.replace('/api', '')}/api-docs`, '_blank')}
            stretched
          >
            üìñ –û—Ç–∫—Ä—ã—Ç—å Swagger UI
          </Button>
        </Div>
      </Group>
    </>
  );

  const renderCharactersTab = () => (
    <>
      <Group header={<Header>üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏</Header>}>
        <Search
          value={characterSearch}
          onChange={(e) => setCharacterSearch(e.target.value)}
          placeholder="–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ —Ñ—Ä–∞–∫—Ü–∏–∏"
        />
        <Div>
          {loading.characters ? (
            <Spinner size="m" style={{ margin: '20px 0' }} />
          ) : (
            filteredCharacters.map((character) => (
              <div key={character.id} style={{ marginBottom: '16px' }}>
                <RichCell
                  before={<Avatar size={40} />}
                  after={
                    <Badge mode="new">
                      {character.status}
                    </Badge>
                  }
                  multiline
                  subtitle={`–†–∞–Ω–≥: ${character.rank} ‚Ä¢ –§—Ä–∞–∫—Ü–∏—è: ${character.faction}`}
                >
                  {character.character_name}
                </RichCell>
                <Div>
                  <ButtonGroup stretched mode="horizontal" gap="m">
                    <Button
                      size="m"
                      mode="secondary"
                      onClick={() => routeNavigator.push(`/admin_anketa_edit/${character.id}`)}
                      stretched
                    >
                      –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </Button>
                    <Button
                      size="m"
                      mode="secondary"
                      onClick={() => {
                        const anketaData = { ...character };
                        const dataStr = JSON.stringify(anketaData, null, 2);
                        const blob = new Blob([dataStr], { type: 'application/json' });
                        const url = URL.createObjectURL(blob);
                        const link = document.createElement('a');
                        link.href = url;
                        link.download = `${character.character_name}_${character.id}.json`;
                        link.click();
                        URL.revokeObjectURL(url);
                      }}
                      before={<Icon24Download />}
                      stretched
                    >
                      –≠–∫—Å–ø–æ—Ä—Ç
                    </Button>
                  </ButtonGroup>
                </Div>
              </div>
            ))
          )}
        </Div>
      </Group>
    </>
  );

  const renderMarketTab = () => (
    <>
      <Group header={<Header>üõí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–æ–º</Header>}>
        <Search
          value={itemSearch}
          onChange={(e) => setItemSearch(e.target.value)}
          placeholder="–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤"
        />
        <Div>
          <Button
            size="l"
            mode="primary"
            onClick={() => {
              setEditingItem({
                name: '',
                description: '',
                price: 0,
                item_type: '–û–±—ã—á–Ω—ã–π',
                item_data: {},
                image_url: '',
                quantity: 1
              });
    setActiveModal(MODAL_PAGE_MARKET_ITEM);
            }}
            before={<Icon24Add />}
          >
            –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
          </Button>
        </Div>
        <Div>
          {loading.items ? (
            <Spinner size="m" style={{ margin: '20px 0' }} />
          ) : (
            filteredMarketItems.map((item) => (
              <RichCell
                key={item.id}
                multiline
                after={`${item.price} ‚Ç≠`}
                subtitle={`–¢–∏–ø: ${item.item_type} ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.quantity}`}
              >
                {item.name}
              </RichCell>
            ))
          )}
        </Div>
      </Group>
    </>
  );

  const renderCryptoTab = () => (
    <Group header={<Header>üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏</Header>}>
      <Div>
        <Text style={{ marginBottom: 16, color: 'var(--vkui--color_text_secondary)' }}>
          –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏ –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ API. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Swagger UI –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞.
        </Text>
        <ButtonGroup stretched mode="vertical" gap="m">
          <Button 
            size="l" 
            mode="secondary" 
            onClick={() => window.open(`${API_URL.replace('/api', '')}/api-docs`, '_blank')}
            before={<Icon24MoneyCircle />}
          >
            üìà –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏
          </Button>
          <Button 
            size="l" 
            mode="secondary" 
            onClick={() => window.open(`${API_URL.replace('/api', '')}/api-docs`, '_blank')}
          >
            üìä –°–æ–±—ã—Ç–∏—è –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
          </Button>
        </ButtonGroup>
      </Div>
    </Group>
  );

  const renderPurchasesTab = () => (
    <Group header={<Header>üõçÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∞–º–∏</Header>}>
      <Div>
        <Text style={{ marginBottom: 16, color: 'var(--vkui--color_text_secondary)' }}>
          –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ API.
        </Text>
        <ButtonGroup stretched mode="vertical" gap="m">
          <Button 
            size="l" 
            mode="secondary" 
            onClick={() => window.open(`${API_URL.replace('/api', '')}/api-docs`, '_blank')}
          >
            üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫
          </Button>
          <Button 
            size="l" 
            mode="secondary" 
            onClick={() => window.open(`${API_URL.replace('/api', '')}/api-docs`, '_blank')}
            before={<Icon24Gift />}
          >
            üéÅ –ü—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏
          </Button>
        </ButtonGroup>
      </Div>
    </Group>
  );

  const renderCollectionsTab = () => (
    <Group header={<Header>üé¥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏</Header>}>
      <Div>
        <Text style={{ marginBottom: 16, color: 'var(--vkui--color_text_secondary)' }}>
          –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–∏—è–º–∏, –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ –∏ –ø–∞–∫–∞–º–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ API.
        </Text>
        <ButtonGroup stretched mode="vertical" gap="m">
          <Button 
            size="l" 
            mode="secondary" 
            onClick={() => window.open(`${API_URL.replace('/api', '')}/api-docs`, '_blank')}
            before={<Icon24Gift />}
          >
            üìö –°–µ—Ä–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π
          </Button>
          <Button 
            size="l" 
            mode="secondary" 
            onClick={() => window.open(`${API_URL.replace('/api', '')}/api-docs`, '_blank')}
            before={<Icon24Add />}
          >
            üéÅ –ü—Ä–µ–¥–º–µ—Ç—ã –∫–æ–ª–ª–µ–∫—Ü–∏–π
          </Button>
          <Button 
            size="l" 
            mode="secondary" 
            onClick={() => window.open(`${API_URL.replace('/api', '')}/api-docs`, '_blank')}
            before={<Icon24Gift />}
          >
            üì¶ –ü–∞–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π
          </Button>
        </ButtonGroup>
      </Div>
    </Group>
  );

  const renderUpdatesTab = () => (
    <Group header={<Header>üìù –û–∂–∏–¥–∞—é—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è</Header>}>
      <Div>
        {loading.updates ? (
          <Spinner size="m" style={{ margin: '20px 0' }} />
        ) : (
          updates.map((update) => (
            <RichCell
              key={update.id}
              after={
                <Badge mode="new">
                  {update.status}
                </Badge>
              }
            >
              {update.character_name}
            </RichCell>
          ))
        )}
      </Div>
    </Group>
  );

  const renderBulkTab = () => (
    <Group header={<Header>‚ö° –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏</Header>}>
      <Div>
        <ButtonGroup stretched mode="vertical" gap="m">
          <Button size="l" mode="secondary" onClick={() => routeNavigator.replace('/bulk_characters')}>
            üëë –ú–∞—Å—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏
          </Button>
          <Button size="l" mode="secondary" onClick={() => routeNavigator.replace('/admin_market')}>
            üìà –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ë–∏—Ä–∂–µ–π
          </Button>
          <Button size="l" mode="secondary" onClick={() => routeNavigator.replace('/admin_events')}>
            üé™ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–≤–µ–Ω—Ç–∞–º–∏
          </Button>
          <Button size="l" mode="secondary" onClick={() => routeNavigator.replace('/admin_activity_requests')}>
            üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
          </Button>
          <Button size="l" mode="secondary" onClick={() => routeNavigator.replace('/admin_factions')}>
            üî∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ—Ä–∞–∫—Ü–∏—è–º–∏
          </Button>
        </ButtonGroup>
      </Div>
    </Group>
  );

  const renderContent = () => {
    switch (activeTab) {
      case 'overview':
        return renderOverviewTab();
      case 'characters':
        return renderCharactersTab();
      case 'market':
        return renderMarketTab();
      case 'crypto':
        return renderCryptoTab();
      case 'purchases':
        return renderPurchasesTab();
      case 'collections':
        return renderCollectionsTab();
      case 'updates':
        return renderUpdatesTab();
      case 'bulk':
        return renderBulkTab();
      default:
        return renderOverviewTab();
    }
  };

  const modal = (
    <ModalRoot activeModal={activeModal} onClose={() => setActiveModal(null)}>
      <ModalPage
        id={MODAL_PAGE_MARKET_ITEM}
        onClose={() => {
          setActiveModal(null);
          setEditingItem(null);
        }}
        header={<ModalPageHeader>–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä</ModalPageHeader>}
      >
        <FormLayoutGroup>
          <FormItem top="–ù–∞–∑–≤–∞–Ω–∏–µ">
            <Input
              value={editingItem?.name || ''}
              onChange={(e) => setEditingItem(prev => ({ ...prev, name: e.target.value }))}
            />
          </FormItem>
          <FormItem top="–û–ø–∏—Å–∞–Ω–∏–µ">
            <Textarea
              value={editingItem?.description || ''}
              onChange={(e) => setEditingItem(prev => ({ ...prev, description: e.target.value }))}
            />
          </FormItem>
          <FormItem top="–¶–µ–Ω–∞">
            <Input
              type="number"
              value={editingItem?.price || 0}
              onChange={(e) => setEditingItem(prev => ({ ...prev, price: parseInt(e.target.value) || 0 }))}
            />
          </FormItem>
          <FormItem top="–¢–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞">
            <Select
              value={editingItem?.item_type || '–û–±—ã—á–Ω—ã–π'}
              onChange={(e) => setEditingItem(prev => ({ ...prev, item_type: e.target.value as any }))}
              options={[
                { label: '–û–±—ã—á–Ω—ã–π', value: '–û–±—ã—á–Ω—ã–π' },
                { label: '–°–∏–Ω–∫–∏', value: '–°–∏–Ω–∫–∏' }
              ]}
            />
          </FormItem>
          {editingItem?.item_type === '–°–∏–Ω–∫–∏' && (
            <>
              <FormItem top="–¢–∏–ø —Å–∏–Ω–∫–∏">
                <Select
                  value={editingItem?.item_data?.sinki_type || '–û—Å–∫–æ–ª–æ–∫'}
                  onChange={(e) => setEditingItem(prev => ({ ...prev, item_data: { ...prev?.item_data, sinki_type: e.target.value as any } }))}
                  options={[
                    { label: '–û—Å–∫–æ–ª–æ–∫', value: '–û—Å–∫–æ–ª–æ–∫' },
                    { label: '–§–æ–∫—É—Å', value: '–§–æ–∫—É—Å' },
                    { label: '–≠—Ö–æ', value: '–≠—Ö–æ' }
                  ]}
                />
              </FormItem>
              <FormItem top="–†–∞–Ω–≥">
                <Select
                  value={editingItem?.item_data?.rank || 'F'}
                  onChange={(e) => setEditingItem(prev => ({ ...prev, item_data: { ...prev?.item_data, rank: e.target.value as any } }))}
                  options={[
                    { label: 'F', value: 'F' }, { label: 'E', value: 'E' }, { label: 'D', value: 'D' },
                    { label: 'C', value: 'C' }, { label: 'B', value: 'B' }, { label: 'A', value: 'A' },
                    { label: 'S', value: 'S' }, { label: 'SS', value: 'SS' }, { label: 'SSS', value: 'SSS' },
                  ]}
                />
              </FormItem>
            </>
          )}
          <FormItem>
            <Button size="l" stretched onClick={handleSaveMarketItem}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</Button>
          </FormItem>
        </FormLayoutGroup>
      </ModalPage>
    </ModalRoot>
  );

  return (
    <Panel id={id}>
      <PanelHeader
        before={<PanelHeaderBack onClick={() => routeNavigator.push('/')} />}
        after={<Button onClick={handleLogout}>–í—ã–π—Ç–∏</Button>}
      >
        –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
      </PanelHeader>
      
      <Tabs>
        <TabsItem 
          selected={activeTab === 'overview'} 
          onClick={() => setActiveTab('overview')}
        >
          üìä –û–±–∑–æ—Ä
        </TabsItem>
        <TabsItem 
          selected={activeTab === 'characters'} 
          onClick={() => setActiveTab('characters')}
        >
          üë• –ü–µ—Ä—Å–æ–Ω–∞–∂–∏
        </TabsItem>
        <TabsItem 
          selected={activeTab === 'market'} 
          onClick={() => setActiveTab('market')}
        >
          üõí –ú–∞—Ä–∫–µ—Ç
        </TabsItem>
        <TabsItem 
          selected={activeTab === 'crypto'} 
          onClick={() => setActiveTab('crypto')}
        >
          üí∞ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        </TabsItem>
        <TabsItem 
          selected={activeTab === 'purchases'} 
          onClick={() => setActiveTab('purchases')}
        >
          üõçÔ∏è –ü–æ–∫—É–ø–∫–∏
        </TabsItem>
        <TabsItem 
          selected={activeTab === 'collections'} 
          onClick={() => setActiveTab('collections')}
        >
          üé¥ –ö–æ–ª–ª–µ–∫—Ü–∏–∏
        </TabsItem>
        <TabsItem 
          selected={activeTab === 'updates'} 
          onClick={() => setActiveTab('updates')}
        >
          üìù –ò–∑–º–µ–Ω–µ–Ω–∏—è
        </TabsItem>
        <TabsItem 
          selected={activeTab === 'bulk'} 
          onClick={() => setActiveTab('bulk')}
        >
          ‚ö° –ú–∞—Å—Å–æ–≤—ã–µ
        </TabsItem>
      </Tabs>

      {renderContent()}
      {modal}
      {snackbar}
    </Panel>
  );
};