import React, { FC, useState, useEffect } from 'react';
import {
  Panel, PanelHeader, Div, Card, Text, Button, Input, Snackbar,
  ModalRoot, ModalPage, ModalPageHeader, FormItem, Checkbox, Search, 
  Textarea, Placeholder, Spinner, PanelHeaderBack
} from '@vkontakte/vkui';
import { Icon28SearchOutline, Icon28UsersOutline, Icon28MoneyCircleOutline, Icon28GiftOutline } from '@vkontakte/icons';
import { useRouteNavigator } from '@vkontakte/vk-mini-apps-router';
import { API_URL } from '../api';

interface NavIdProps {
  id: string;
}

interface Character {
  id: number;
  character_name: string;
  rank: string;
  faction: string;
  currency: number;
  strength: number;
  agility: number;
  intellect: number;
  endurance: number;
  luck: number;
  first_name?: string;
  last_name?: string;
}

type ModalType = 'attributes' | 'currency' | 'inventory' | null;

export const BulkCharacterManagement: FC<NavIdProps> = ({ id }) => {
  const routeNavigator = useRouteNavigator();
  const [characters, setCharacters] = useState<Character[]>([]);
  const [selectedCharacters, setSelectedCharacters] = useState<Set<number>>(new Set());
  const [searchQuery, setSearchQuery] = useState('');
  const [loading, setLoading] = useState(false);
  const [snackbar, setSnackbar] = useState<React.ReactNode>(null);
  const [activeModal, setActiveModal] = useState<ModalType>(null);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
  const [attributeChanges, setAttributeChanges] = useState({
    strength: 0,
    agility: 0,
    intellect: 0,
    endurance: 0,
    luck: 0
  });
  const [currencyChange, setCurrencyChange] = useState(0);
  const [inventoryItem, setInventoryItem] = useState({
    name: '',
    description: '',
    quantity: 1
  });

  // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
  const [currentPage, setCurrentPage] = useState(0);
  const [totalCharacters, setTotalCharacters] = useState(0);
  const limit = 50;

  useEffect(() => {
    fetchCharacters();
  }, [searchQuery, currentPage]);

  const fetchCharacters = async () => {
    try {
      setLoading(true);
      const response = await fetch(
        `${API_URL}/admin/characters?search=${encodeURIComponent(searchQuery)}&limit=${limit}&offset=${currentPage * limit}`,
        {
          headers: { 'x-admin-id': '1' }
        }
      );
      const data = await response.json();
      setCharacters(data.characters || []);
      setTotalCharacters(data.total || 0);
    } catch (error) {
      console.error('Failed to fetch characters:', error);
      showSnackbar('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π', false);
    } finally {
      setLoading(false);
    }
  };

  const showSnackbar = (message: string, success: boolean) => {
    setSnackbar(
      <Snackbar
        onClose={() => setSnackbar(null)}
        before={success ? '‚úÖ' : '‚ùå'}
      >
        {message}
      </Snackbar>
    );
  };

  const handleCharacterSelect = (characterId: number) => {
    const newSelected = new Set(selectedCharacters);
    if (newSelected.has(characterId)) {
      newSelected.delete(characterId);
    } else {
      newSelected.add(characterId);
    }
    setSelectedCharacters(newSelected);
  };

  const selectAllVisible = () => {
    const allVisibleIds = new Set(characters.map(c => c.id));
    setSelectedCharacters(allVisibleIds);
  };

  const clearSelection = () => {
    setSelectedCharacters(new Set());
  };

  const bulkUpdateAttributes = async () => {
    if (selectedCharacters.size === 0) {
      showSnackbar('–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π', false);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const hasChanges = Object.values(attributeChanges).some(value => value !== 0);
    if (!hasChanges) {
      showSnackbar('–£–∫–∞–∂–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤', false);
      return;
    }

    try {
      setLoading(true);
      const response = await fetch(`${API_URL}/admin/characters/bulk-update-attributes`, {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          'x-admin-id': '1'
        },
        body: JSON.stringify({
          character_ids: Array.from(selectedCharacters),
          attribute_changes: attributeChanges
        })
      });

      if (response.ok) {
        const result = await response.json();
        showSnackbar(`–û–±–Ω–æ–≤–ª–µ–Ω–æ ${result.updated_count} –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π`, true);
        setActiveModal(null);
        resetForms();
        fetchCharacters();
      } else {
        const errorData = await response.json();
        showSnackbar(errorData.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', false);
      }
    } catch (error) {
      console.error('Failed to update attributes:', error);
      showSnackbar('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', false);
    } finally {
      setLoading(false);
    }
  };

  const bulkUpdateCurrency = async () => {
    if (selectedCharacters.size === 0) {
      showSnackbar('–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π', false);
      return;
    }

    if (currencyChange === 0) {
      showSnackbar('–£–∫–∞–∂–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã', false);
      return;
    }

    try {
      setLoading(true);
      const response = await fetch(`${API_URL}/admin/characters/bulk-update-currency`, {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          'x-admin-id': '1'
        },
        body: JSON.stringify({
          character_ids: Array.from(selectedCharacters),
          currency_change: currencyChange
        })
      });

      if (response.ok) {
        const result = await response.json();
        showSnackbar(`–û–±–Ω–æ–≤–ª–µ–Ω–æ ${result.updated_count} –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π`, true);
        setActiveModal(null);
        resetForms();
        fetchCharacters();
      } else {
        const errorData = await response.json();
        showSnackbar(errorData.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', false);
      }
    } catch (error) {
      console.error('Failed to update currency:', error);
      showSnackbar('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', false);
    } finally {
      setLoading(false);
    }
  };

  const bulkAddInventory = async () => {
    if (selectedCharacters.size === 0) {
      showSnackbar('–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π', false);
      return;
    }

    if (!inventoryItem.name.trim()) {
      showSnackbar('–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞', false);
      return;
    }

    try {
      setLoading(true);
      const response = await fetch(`${API_URL}/admin/characters/bulk-add-inventory`, {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          'x-admin-id': '1'
        },
        body: JSON.stringify({
          character_ids: Array.from(selectedCharacters),
          item_name: inventoryItem.name.trim(),
          item_description: inventoryItem.description.trim(),
          quantity: inventoryItem.quantity
        })
      });

      if (response.ok) {
        const result = await response.json();
        showSnackbar(`–û–±–Ω–æ–≤–ª–µ–Ω–æ ${result.updated_count} –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π`, true);
        setActiveModal(null);
        resetForms();
        fetchCharacters();
      } else {
        const errorData = await response.json();
        showSnackbar(errorData.error || '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è', false);
      }
    } catch (error) {
      console.error('Failed to add inventory:', error);
      showSnackbar('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', false);
    } finally {
      setLoading(false);
    }
  };

  const resetForms = () => {
    setAttributeChanges({
      strength: 0,
      agility: 0,
      intellect: 0,
      endurance: 0,
      luck: 0
    });
    setCurrencyChange(0);
    setInventoryItem({
      name: '',
      description: '',
      quantity: 1
    });
  };

  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value);
    setCurrentPage(0);
  };

  const nextPage = () => {
    if ((currentPage + 1) * limit < totalCharacters) {
      setCurrentPage(currentPage + 1);
    }
  };

  const prevPage = () => {
    if (currentPage > 0) {
      setCurrentPage(currentPage - 1);
    }
  };

  return (
    <Panel id={id}>
      <PanelHeader before={<PanelHeaderBack onClick={() => routeNavigator.push('/admin_panel')} />}>
        üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ü–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏
      </PanelHeader>

      <Div>
        {/* –ü–æ–∏—Å–∫ */}
        <Card style={{ marginBottom: 16 }}>
          <Div>
            <Text weight="2" style={{ fontSize: 18, marginBottom: 12 }}>
              –ü–æ–∏—Å–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
            </Text>
            
            <Search
              value={searchQuery}
              onChange={handleSearchChange}
              placeholder="–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏, —Ä–∞–Ω–≥—É, —Ñ—Ä–∞–∫—Ü–∏–∏..."
              before={<Icon28SearchOutline />}
            />
            
            <div style={{ 
              display: 'flex', 
              justifyContent: 'space-between', 
              alignItems: 'center',
              marginTop: 12,
              fontSize: 14,
              color: '#666'
            }}>
              <Text>
                –ù–∞–π–¥–µ–Ω–æ: {totalCharacters} | –í—ã–±—Ä–∞–Ω–æ: {selectedCharacters.size}
              </Text>
              <div style={{ display: 'flex', gap: 8 }}>
                <Button size="s" mode="secondary" onClick={selectAllVisible}>
                  –í—ã–±—Ä–∞—Ç—å –≤—Å–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                </Button>
                <Button size="s" mode="secondary" onClick={clearSelection}>
                  –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä
                </Button>
              </div>
            </div>
          </Div>
        </Card>

        {/* –î–µ–π—Å—Ç–≤–∏—è */}
        <Card style={{ marginBottom: 16 }}>
          <Div>
            <Text weight="2" style={{ fontSize: 18, marginBottom: 12 }}>
              –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            </Text>
            
            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: 12 }}>
              <Button
                onClick={() => setActiveModal('attributes')}
                disabled={selectedCharacters.size === 0}
                before={<Icon28UsersOutline />}
                style={{ backgroundColor: '#2196F3', color: 'white' }}
              >
                –ò–∑–º–µ–Ω–∏—Ç—å –∞—Ç—Ä–∏–±—É—Ç—ã ({selectedCharacters.size})
              </Button>
              
              <Button
                onClick={() => setActiveModal('currency')}
                disabled={selectedCharacters.size === 0}
                before={<Icon28MoneyCircleOutline />}
                style={{ backgroundColor: '#4CAF50', color: 'white' }}
              >
                –ò–∑–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç—É ({selectedCharacters.size})
              </Button>
              
              <Button
                onClick={() => setActiveModal('inventory')}
                disabled={selectedCharacters.size === 0}
                before={<Icon28GiftOutline />}
                style={{ backgroundColor: '#FF9800', color: 'white' }}
              >
                –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç ({selectedCharacters.size})
              </Button>
            </div>
          </Div>
        </Card>

        {/* –°–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π */}
        {loading && characters.length === 0 ? (
          <Placeholder>
            <Spinner size="l" />
          </Placeholder>
        ) : characters.length === 0 ? (
          <Placeholder
            icon={<Icon28SearchOutline />}
          >
            <Text weight="2" style={{ fontSize: 18, marginBottom: 8 }}>
              –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            </Text>
            <Text style={{ color: '#666' }}>
              {searchQuery ? '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å' : '–ù–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ'}
            </Text>
          </Placeholder>
        ) : (
          <>
            {characters.map(character => (
              <Card key={character.id} style={{ marginBottom: 8 }}>
                <Div>
                  <div style={{ display: 'flex', alignItems: 'center', gap: 12 }}>
                    <Checkbox
                      checked={selectedCharacters.has(character.id)}
                      onChange={() => handleCharacterSelect(character.id)}
                    />
                    
                    <div style={{ flex: 1 }}>
                      <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 4 }}>
                        <Text weight="2" style={{ fontSize: 16 }}>
                          {character.character_name}
                        </Text>
                        <Text style={{ fontSize: 14, color: '#666' }}>
                          ID: {character.id}
                        </Text>
                      </div>
                      
                      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(120px, 1fr))', gap: 8, fontSize: 14 }}>
                        <Text>–†–∞–Ω–≥: {character.rank}</Text>
                        <Text>–§—Ä–∞–∫—Ü–∏—è: {character.faction}</Text>
                        <Text>üí∞ {character.currency}</Text>
                        {character.first_name && (
                          <Text>–ò–≥—Ä–æ–∫: {character.first_name} {character.last_name}</Text>
                        )}
                      </div>
                      
                      <div style={{ display: 'flex', gap: 12, marginTop: 4, fontSize: 12, color: '#666' }}>
                        <span>üí™ {character.strength}</span>
                        <span>‚ö° {character.agility}</span>
                        <span>üß† {character.intellect}</span>
                        <span>üõ°Ô∏è {character.endurance}</span>
                        <span>üçÄ {character.luck}</span>
                      </div>
                    </div>
                  </div>
                </Div>
              </Card>
            ))}

            {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
            <div style={{ 
              display: 'flex', 
              justifyContent: 'space-between', 
              alignItems: 'center',
              marginTop: 16
            }}>
              <Button 
                size="s" 
                mode="secondary" 
                onClick={prevPage}
                disabled={currentPage === 0}
              >
                ‚Üê –ù–∞–∑–∞–¥
              </Button>
              
              <Text style={{ fontSize: 14, color: '#666' }}>
                –°—Ç—Ä–∞–Ω–∏—Ü–∞ {currentPage + 1} –∏–∑ {Math.ceil(totalCharacters / limit)}
              </Text>
              
              <Button 
                size="s" 
                mode="secondary" 
                onClick={nextPage}
                disabled={(currentPage + 1) * limit >= totalCharacters}
              >
                –í–ø–µ—Ä–µ–¥ ‚Üí
              </Button>
            </div>
          </>
        )}
      </Div>

      {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ */}
      <ModalRoot activeModal={activeModal}>
        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ */}
        <ModalPage
          id="attributes"
          onClose={() => setActiveModal(null)}
          header={<ModalPageHeader>–ò–∑–º–µ–Ω–∏—Ç—å –∞—Ç—Ä–∏–±—É—Ç—ã</ModalPageHeader>}
        >
          <Div>
            <Text style={{ marginBottom: 16, fontSize: 14, color: '#666' }}>
              –í—ã–±—Ä–∞–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {selectedCharacters.size}
            </Text>

            <div style={{ display: 'grid', gap: 12 }}>
              <FormItem top="üí™ –°–∏–ª–∞">
                <Input
                  type="number"
                  value={attributeChanges.strength.toString()}
                  onChange={(e) => setAttributeChanges(prev => ({
                    ...prev,
                    strength: parseInt(e.target.value) || 0
                  }))}
                  placeholder="0 (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)"
                />
              </FormItem>

              <FormItem top="‚ö° –õ–æ–≤–∫–æ—Å—Ç—å">
                <Input
                  type="number"
                  value={attributeChanges.agility.toString()}
                  onChange={(e) => setAttributeChanges(prev => ({
                    ...prev,
                    agility: parseInt(e.target.value) || 0
                  }))}
                  placeholder="0 (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)"
                />
              </FormItem>

              <FormItem top="üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç">
                <Input
                  type="number"
                  value={attributeChanges.intellect.toString()}
                  onChange={(e) => setAttributeChanges(prev => ({
                    ...prev,
                    intellect: parseInt(e.target.value) || 0
                  }))}
                  placeholder="0 (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)"
                />
              </FormItem>

              <FormItem top="üõ°Ô∏è –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å">
                <Input
                  type="number"
                  value={attributeChanges.endurance.toString()}
                  onChange={(e) => setAttributeChanges(prev => ({
                    ...prev,
                    endurance: parseInt(e.target.value) || 0
                  }))}
                  placeholder="0 (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)"
                />
              </FormItem>

              <FormItem top="üçÄ –£–¥–∞—á–∞">
                <Input
                  type="number"
                  value={attributeChanges.luck.toString()}
                  onChange={(e) => setAttributeChanges(prev => ({
                    ...prev,
                    luck: parseInt(e.target.value) || 0
                  }))}
                  placeholder="0 (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)"
                />
              </FormItem>
            </div>

            <Text style={{ fontSize: 12, color: '#666', marginTop: 8, marginBottom: 16 }}>
              –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤
            </Text>

            <Button
              size="l"
              onClick={bulkUpdateAttributes}
              disabled={loading}
              style={{ width: '100%' }}
            >
              {loading ? '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...' : '–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'}
            </Button>
          </Div>
        </ModalPage>

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã */}
        <ModalPage
          id="currency"
          onClose={() => setActiveModal(null)}
          header={<ModalPageHeader>–ò–∑–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç—É</ModalPageHeader>}
        >
          <Div>
            <Text style={{ marginBottom: 16, fontSize: 14, color: '#666' }}>
              –í—ã–±—Ä–∞–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {selectedCharacters.size}
            </Text>

            <FormItem top="üí∞ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã">
              <Input
                type="number"
                value={currencyChange.toString()}
                onChange={(e) => setCurrencyChange(parseInt(e.target.value) || 0)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ)"
              />
            </FormItem>

            <Text style={{ fontSize: 12, color: '#666', marginBottom: 16 }}>
              –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –¥–ª—è –≤—ã—á–∏—Ç–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã
            </Text>

            <Button
              size="l"
              onClick={bulkUpdateCurrency}
              disabled={loading || currencyChange === 0}
              style={{ width: '100%' }}
            >
              {loading ? '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...' : '–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'}
            </Button>
          </Div>
        </ModalPage>

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ */}
        <ModalPage
          id="inventory"
          onClose={() => setActiveModal(null)}
          header={<ModalPageHeader>–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç</ModalPageHeader>}
        >
          <Div>
            <Text style={{ marginBottom: 16, fontSize: 14, color: '#666' }}>
              –í—ã–±—Ä–∞–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {selectedCharacters.size}
            </Text>

            <FormItem top="üéÅ –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ *">
              <Input
                value={inventoryItem.name}
                onChange={(e) => setInventoryItem(prev => ({
                  ...prev,
                  name: e.target.value
                }))}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–µ—á –¥—Ä–∞–∫–æ–Ω–∞"
              />
            </FormItem>

            <FormItem top="üìù –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞">
              <Textarea
                value={inventoryItem.description}
                onChange={(e) => setInventoryItem(prev => ({
                  ...prev,
                  description: e.target.value
                }))}
                placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
                rows={3}
              />
            </FormItem>

            <FormItem top="üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ">
              <Input
                type="number"
                value={inventoryItem.quantity.toString()}
                onChange={(e) => setInventoryItem(prev => ({
                  ...prev,
                  quantity: Math.max(1, parseInt(e.target.value) || 1)
                }))}
                min="1"
              />
            </FormItem>

            <Button
              size="l"
              onClick={bulkAddInventory}
              disabled={loading || !inventoryItem.name.trim()}
              style={{ width: '100%' }}
            >
              {loading ? '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ...' : '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç'}
            </Button>
          </Div>
        </ModalPage>
      </ModalRoot>

      {snackbar}
    </Panel>
  );
};
