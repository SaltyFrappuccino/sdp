import {
  Panel,
  PanelHeader,
  PanelHeaderBack,
  Group,
  Header,
  Cell,
  Avatar,
  Tabs,
  TabsItem,
  Search,
  CustomSelect,
  CustomSelectOption,
  Div,
  Title,
  Text,
  Spacing,
  Card,
  CardGrid,
  Spinner,
  InfoRow,
  Chip
} from '@vkontakte/vkui';
import { FC, useEffect, useState } from 'react';
import { useRouteNavigator } from '@vkontakte/vk-mini-apps-router';
import { API_URL } from '../api';

interface NavIdProps {
  id: string;
}

interface BestiarySpecies {
  id: number;
  family_id: number;
  name: string;
  name_latin: string;
  mutation_class: string;
  danger_rank: string;
  habitat_type: string;
  description: string;
  appearance: string;
  behavior: string;
  abilities: string;
  size_category: string;
  weight_min: number;
  weight_max: number;
  tags: string;
  image_url: string;
  islands: string;
  strength_tag: string;
  speed_tag: string;
  defense_tag: string;
  special_tag: string;
  credit_value_min: number;
  credit_value_max: number;
}

const BestiaryPanel: FC<NavIdProps> = ({ id }) => {
  const routeNavigator = useRouteNavigator();
  const [species, setSpecies] = useState<BestiarySpecies[]>([]);
  const [filteredSpecies, setFilteredSpecies] = useState<BestiarySpecies[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedIsland, setSelectedIsland] = useState<string>('');
  const [selectedClass, setSelectedClass] = useState<string>('');
  const [selectedType, setSelectedType] = useState<string>('');
  const [activeTab, setActiveTab] = useState<string>('all');

  useEffect(() => {
    fetchSpecies();
  }, []);

  useEffect(() => {
    filterSpecies();
  }, [species, searchQuery, selectedIsland, selectedClass, selectedType, activeTab]);

  const fetchSpecies = async () => {
    try {
      const response = await fetch(`${API_URL}/bestiary/species`);
      const data = await response.json();
      setSpecies(data);
      setFilteredSpecies(data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–µ—Å—Ç–∏–∞—Ä–∏—è:', error);
    } finally {
      setLoading(false);
    }
  };

  const filterSpecies = () => {
    let filtered = [...species];

    // –§–∏–ª—å—Ç—Ä –ø–æ –≤–∫–ª–∞–¥–∫–µ (—Ç–∏–ø —Å—Ä–µ–¥—ã)
    if (activeTab !== 'all') {
      filtered = filtered.filter(s => s.habitat_type === activeTab);
    }

    // –ü–æ–∏—Å–∫
    if (searchQuery) {
      filtered = filtered.filter(s =>
        s.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        s.name_latin.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –æ—Å—Ç—Ä–æ–≤—É
    if (selectedIsland) {
      filtered = filtered.filter(s => s.islands?.includes(selectedIsland));
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –∫–ª–∞—Å—Å—É –º—É—Ç–∞—Ü–∏–∏
    if (selectedClass) {
      filtered = filtered.filter(s => s.mutation_class === selectedClass);
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —Å—Ä–µ–¥—ã (–¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞)
    if (selectedType) {
      filtered = filtered.filter(s => s.habitat_type === selectedType);
    }

    setFilteredSpecies(filtered);
  };

  const getDangerColor = (rank: string) => {
    const colors: Record<string, string> = {
      'F': '#A0A0A0',
      'E': '#90EE90',
      'D': '#87CEEB',
      'C': '#FFD700',
      'B': '#FFA500',
      'A': '#FF6347',
      'S': '#FF1493',
      'SS': '#8B00FF',
      'SSS': '#FF0000'
    };
    return colors[rank] || '#A0A0A0';
  };

  const getMutationClassColor = (mutationClass: string) => {
    const colors: Record<string, string> = {
      '–ó–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ': '#90EE90',
      '–ò—Å–∫–∞–∂—ë–Ω–Ω—ã–µ': '#FFA500',
      '–ë–µ—Å—Ç–∏–∏': '#FF4500'
    };
    return colors[mutationClass] || '#A0A0A0';
  };

  return (
    <Panel id={id}>
      <PanelHeader before={<PanelHeaderBack onClick={() => routeNavigator.back()} />}>
        –ë–µ—Å—Ç–∏–∞—Ä–∏–π
      </PanelHeader>

      <Group>
        <Search value={searchQuery} onChange={(e) => setSearchQuery(e.target.value)} placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é..." />
      </Group>

      <Group>
        <Tabs>
          <TabsItem selected={activeTab === 'all'} onClick={() => setActiveTab('all')}>
            –í—Å–µ
          </TabsItem>
          <TabsItem selected={activeTab === '–ù–∞–∑–µ–º–Ω—ã–µ'} onClick={() => setActiveTab('–ù–∞–∑–µ–º–Ω—ã–µ')}>
            üå≤ –ù–∞–∑–µ–º–Ω—ã–µ
          </TabsItem>
          <TabsItem selected={activeTab === '–í–æ–¥–Ω—ã–µ'} onClick={() => setActiveTab('–í–æ–¥–Ω—ã–µ')}>
            üåä –í–æ–¥–Ω—ã–µ
          </TabsItem>
          <TabsItem selected={activeTab === '–í–æ–∑–¥—É—à–Ω—ã–µ'} onClick={() => setActiveTab('–í–æ–∑–¥—É—à–Ω—ã–µ')}>
            ‚òÅÔ∏è –í–æ–∑–¥—É—à–Ω—ã–µ
          </TabsItem>
        </Tabs>
      </Group>

      <Group header={<Header>–§–∏–ª—å—Ç—Ä—ã</Header>}>
        <Div>
          <CustomSelect
            placeholder="–û—Å—Ç—Ä–æ–≤"
            value={selectedIsland}
            onChange={(e) => setSelectedIsland(e.target.value)}
            options={[
              { label: '–í—Å–µ –æ—Å—Ç—Ä–æ–≤–∞', value: '' },
              { label: '–ö–∞–≥–∞', value: '–ö–∞–≥–∞' },
              { label: '–•–æ—à–∏', value: '–•–æ—à–∏' },
              { label: '–ò—á–∏', value: '–ò—á–∏' },
              { label: '–ö—É—Ä–æ', value: '–ö—É—Ä–æ' },
              { label: '–ú–∏–¥–∑—É', value: '–ú–∏–¥–∑—É' },
              { label: '–°–æ—Ä–∞', value: '–°–æ—Ä–∞' }
            ]}
          />
          <Spacing size={12} />
          <CustomSelect
            placeholder="–ö–ª–∞—Å—Å –º—É—Ç–∞—Ü–∏–∏"
            value={selectedClass}
            onChange={(e) => setSelectedClass(e.target.value)}
            options={[
              { label: '–í—Å–µ –∫–ª–∞—Å—Å—ã', value: '' },
              { label: '–ó–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ', value: '–ó–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ' },
              { label: '–ò—Å–∫–∞–∂—ë–Ω–Ω—ã–µ', value: '–ò—Å–∫–∞–∂—ë–Ω–Ω—ã–µ' },
              { label: '–ë–µ—Å—Ç–∏–∏', value: '–ë–µ—Å—Ç–∏–∏' }
            ]}
          />
        </Div>
      </Group>

      <Group header={<Header>–°—É—â–µ—Å—Ç–≤–∞ ({filteredSpecies.length})</Header>}>
        {loading ? (
          <Div style={{ textAlign: 'center', padding: '20px' }}>
            <Spinner size="l" />
          </Div>
        ) : filteredSpecies.length === 0 ? (
          <Div>
            <Text style={{ textAlign: 'center', color: 'var(--vkui--color_text_secondary)' }}>
              –°—É—â–µ—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            </Text>
          </Div>
        ) : (
          <CardGrid size="l">
            {filteredSpecies.map((creature) => (
              <Card key={creature.id} mode="shadow">
                <Div>
                  <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', marginBottom: '12px' }}>
                    <div>
                      <Title level="3" weight="2" style={{ marginBottom: '4px' }}>
                        {creature.name}
                      </Title>
                      <Text style={{ color: 'var(--vkui--color_text_secondary)', fontSize: '14px', fontStyle: 'italic' }}>
                        {creature.name_latin}
                      </Text>
                    </div>
                    <Chip
                      style={{
                        backgroundColor: getDangerColor(creature.danger_rank),
                        color: '#fff',
                        fontWeight: 'bold'
                      }}
                    >
                      –†–∞–Ω–≥ {creature.danger_rank}
                    </Chip>
                  </div>

                  <div style={{ marginBottom: '12px' }}>
                    <Chip style={{ backgroundColor: getMutationClassColor(creature.mutation_class), color: '#fff', marginRight: '8px' }}>
                      {creature.mutation_class}
                    </Chip>
                    <Chip>{creature.habitat_type}</Chip>
                    {creature.size_category && <Chip>{creature.size_category}</Chip>}
                  </div>

                  <Text style={{ marginBottom: '12px' }}>{creature.description}</Text>

                  <InfoRow header="–í–Ω–µ—à–Ω–æ—Å—Ç—å">
                    <Text style={{ fontSize: '14px', color: 'var(--vkui--color_text_secondary)' }}>
                      {creature.appearance}
                    </Text>
                  </InfoRow>

                  {creature.abilities && (
                    <InfoRow header="–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏">
                      <Text style={{ fontSize: '14px', color: 'var(--vkui--color_accent)' }}>
                        {creature.abilities}
                      </Text>
                    </InfoRow>
                  )}

                  {creature.islands && (
                    <InfoRow header="–ú–µ—Å—Ç–∞ –æ–±–∏—Ç–∞–Ω–∏—è">
                      <Text style={{ fontSize: '14px' }}>üó∫Ô∏è {creature.islands}</Text>
                    </InfoRow>
                  )}

                  <div style={{ marginTop: '12px', display: 'flex', gap: '8px', flexWrap: 'wrap' }}>
                    {creature.strength_tag && (
                      <Chip style={{ fontSize: '12px' }}>üí™ –°–∏–ª–∞: {creature.strength_tag}</Chip>
                    )}
                    {creature.speed_tag && (
                      <Chip style={{ fontSize: '12px' }}>‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {creature.speed_tag}</Chip>
                    )}
                    {creature.defense_tag && (
                      <Chip style={{ fontSize: '12px' }}>üõ°Ô∏è –ó–∞—â–∏—Ç–∞: {creature.defense_tag}</Chip>
                    )}
                  </div>

                  {creature.credit_value_min && (
                    <div style={{ marginTop: '12px', padding: '8px', backgroundColor: 'var(--vkui--color_background_secondary)', borderRadius: '8px' }}>
                      <Text weight="2">üí∞ –¶–µ–Ω–Ω–æ—Å—Ç—å: {creature.credit_value_min.toLocaleString()} - {creature.credit_value_max.toLocaleString()} ‚Ç≠</Text>
                    </div>
                  )}
                </Div>
              </Card>
            ))}
          </CardGrid>
        )}
      </Group>
    </Panel>
  );
};

export default BestiaryPanel;

