import React, { FC, useState, useEffect } from 'react';
import { Panel, PanelHeader, Button, Card, Div, Text, Input, Select, Snackbar, ModalRoot, ModalPage, ModalPageHeader, PanelHeaderBack, Group, Header, SimpleCell } from '@vkontakte/vkui';
import { useRouteNavigator } from '@vkontakte/vk-mini-apps-router';
import { API_URL } from '../api';
import { Icon28GameOutline, Icon28Users3Outline, Icon28AddOutline } from '@vkontakte/icons';
import { PokerTable } from '../components/PokerTable';

interface NavIdProps {
  id: string;
}

interface Character {
  id: number;
  character_name: string;
  currency: number;
}

interface PokerRoom {
  id: number;
  room_name: string;
  creator_id: number;
  creator_name: string;
  current_players: number;
  max_players: number;
  buy_in: number;
  small_blind: number;
  big_blind: number;
  status: 'waiting' | 'playing' | 'finished';
  created_at: string;
}

interface PokerPanelProps extends NavIdProps {
  fetchedUser?: any;
}

export const PokerPanel: FC<PokerPanelProps> = ({ id, fetchedUser }) => {
  const routeNavigator = useRouteNavigator();
  const [characters, setCharacters] = useState<Character[]>([]);
  const [selectedCharacter, setSelectedCharacter] = useState<number | null>(null);
  const [pokerRooms, setPokerRooms] = useState<PokerRoom[]>([]);
  const [snackbar, setSnackbar] = useState<React.ReactNode>(null);
  const [activeModal, setActiveModal] = useState<string | null>(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ —Å—Ç–æ–ª–∞
  const [currentRoomId, setCurrentRoomId] = useState<number | null>(null);
  const [currentPlayerId, setCurrentPlayerId] = useState<number | null>(null);
  const [showTable, setShowTable] = useState<boolean>(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
  const [newRoomName, setNewRoomName] = useState<string>('');
  const [newRoomBuyIn, setNewRoomBuyIn] = useState<string>('1000');
  const [newRoomMaxPlayers, setNewRoomMaxPlayers] = useState<string>('6');

  useEffect(() => {
    fetchCharacters();
    fetchPokerRooms();
  }, [fetchedUser]);

  const fetchCharacters = async () => {
    if (!fetchedUser) return;
    try {
      const response = await fetch(`${API_URL}/characters/by-vk/${fetchedUser.id}`);
      const data = await response.json();
      setCharacters(data);
    } catch (error) {
      console.error('Failed to fetch characters:', error);
    }
  };

  const fetchPokerRooms = async () => {
    try {
      const response = await fetch(`${API_URL}/poker/rooms`);
      const data = await response.json();
      setPokerRooms(data);
    } catch (error) {
      console.error('Failed to fetch poker rooms:', error);
    }
  };

  const showResultSnackbar = (message: string, isSuccess: boolean) => {
    setSnackbar(
      <Snackbar
        onClose={() => setSnackbar(null)}
        before={<Icon28GameOutline />}
      >
        {message}
      </Snackbar>
    );
  };

  const createRoom = async () => {
    if (!selectedCharacter || !newRoomName.trim() || !newRoomBuyIn) {
      showResultSnackbar('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', false);
      return;
    }

    try {
      const response = await fetch(`${API_URL}/poker/rooms`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          character_id: selectedCharacter,
          room_name: newRoomName.trim(),
          buy_in: parseInt(newRoomBuyIn),
          max_players: parseInt(newRoomMaxPlayers)
        })
      });

      if (response.ok) {
        const data = await response.json();
        showResultSnackbar('–ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞! –ü–µ—Ä–µ—Ö–æ–¥ –≤ –∫–æ–º–Ω–∞—Ç—É...', true);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—Ö–æ–¥–∏–º –≤ —Å–æ–∑–¥–∞–Ω–Ω—É—é –∫–æ–º–Ω–∞—Ç—É
        if (data.room_id) {
          setCurrentRoomId(data.room_id);
          setCurrentPlayerId(selectedCharacter);
          setShowTable(true);
        }
        
        setActiveModal(null);
        setNewRoomName('');
        setNewRoomBuyIn('1000');
        setNewRoomMaxPlayers('6');
        await fetchCharacters();
        await fetchPokerRooms();
      } else {
        const errorData = await response.json();
        showResultSnackbar(errorData.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã', false);
      }
    } catch (error) {
      console.error('Failed to create room:', error);
      showResultSnackbar('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', false);
    }
  };

  const deleteRoom = async (roomId: number) => {
    if (!selectedCharacter) {
      showResultSnackbar('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞', false);
      return;
    }

    try {
      const response = await fetch(`${API_URL}/poker/rooms/${roomId}`, {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          character_id: selectedCharacter
        })
      });

      if (response.ok) {
        showResultSnackbar('–ö–æ–º–Ω–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞', true);
        await fetchPokerRooms();
        await fetchCharacters(); // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ buy-in
      } else {
        const errorData = await response.json();
        showResultSnackbar(errorData.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã', false);
      }
    } catch (error) {
      console.error('Failed to delete room:', error);
      showResultSnackbar('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', false);
    }
  };

  const joinRoom = async (roomId: number) => {
    if (!selectedCharacter) {
      showResultSnackbar('–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞', false);
      return;
    }

    try {
      const response = await fetch(`${API_URL}/poker/rooms/${roomId}/join`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          character_id: selectedCharacter
        })
      });

      if (response.ok) {
        const data = await response.json();
        showResultSnackbar('–£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ!', true);
        
        // –ü–æ–ª—É—á–∞–µ–º ID –∏–≥—Ä–æ–∫–∞ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ
        const roomResponse = await fetch(`${API_URL}/poker/rooms/${roomId}`);
        const roomData = await roomResponse.json();
        const player = roomData.players.find((p: any) => p.character_id === selectedCharacter);
        
        if (player) {
          setCurrentRoomId(roomId);
          setCurrentPlayerId(player.id);
          setShowTable(true);
        }
        
        await fetchCharacters();
        await fetchPokerRooms();
      } else {
        const errorData = await response.json();
        showResultSnackbar(errorData.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', false);
      }
    } catch (error) {
      console.error('Failed to join room:', error);
      showResultSnackbar('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', false);
    }
  };

  const leaveTable = () => {
    setShowTable(false);
    setCurrentRoomId(null);
    setCurrentPlayerId(null);
    fetchCharacters();
    fetchPokerRooms();
  };

  const selectedCharacterData = characters.find(c => c.id === selectedCharacter);

  // –ï—Å–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Å—Ç–æ–ª
  if (showTable && currentRoomId && currentPlayerId && selectedCharacter) {
    return (
      <PokerTable
        roomId={currentRoomId}
        currentPlayerId={currentPlayerId}
        currentCharacterId={selectedCharacter}
        onLeaveRoom={leaveTable}
      />
    );
  }

  return (
    <Panel id={id}>
      <PanelHeader before={<PanelHeaderBack onClick={() => routeNavigator.push('/')} />}>
        üÉè –ü–æ–∫–µ—Ä
      </PanelHeader>
      
      <Div>
        <Card>
          <Div>
            <Text weight="2" style={{ marginBottom: 16 }}>
              –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –∏–≥—Ä—ã
            </Text>
            <Select
              placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"
              value={selectedCharacter?.toString() || ''}
              onChange={(e) => setSelectedCharacter(parseInt(e.target.value))}
              options={characters.map(char => ({
                label: `${char.character_name} (${char.currency} üí∞)`,
                value: char.id.toString()
              }))}
            />
          </Div>
        </Card>

        {selectedCharacterData && (
          <Card style={{ marginTop: 16 }}>
            <Div>
              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 16 }}>
                <Text weight="2">üéÆ –ü–æ–∫–µ—Ä–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã</Text>
                <Button
                  size="s"
                  before={<Icon28AddOutline />}
                  onClick={() => setActiveModal('create-room')}
                >
                  –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É
                </Button>
              </div>
              
              {pokerRooms.length === 0 ? (
                <Text style={{ color: '#666', textAlign: 'center', padding: 20 }}>
                  –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é!
                </Text>
              ) : (
                pokerRooms.map((room) => (
                  <Card key={room.id} style={{ marginBottom: 12, backgroundColor: '#333' }}>
                    <Div>
                      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                        <div>
                          <Text weight="2" style={{ color: '#fff' }}>{room.room_name}</Text>
                          <Text style={{ fontSize: 12, color: '#ccc', marginTop: 4 }}>
                            {room.creator_name} ‚Ä¢ Buy-in: {room.buy_in} üí∞ ‚Ä¢ –ë–ª–∞–π–Ω–¥—ã: {room.small_blind}/{room.big_blind}
                          </Text>
                          <Text style={{ fontSize: 12, color: '#ccc', marginTop: 4 }}>
                            –ò–≥—Ä–æ–∫–∏: {room.current_players}/{room.max_players} ‚Ä¢ {room.status === 'waiting' ? '–û–∂–∏–¥–∞–Ω–∏–µ' : '–ò–¥–µ—Ç –∏–≥—Ä–∞'}
                          </Text>
                        </div>
                        <div style={{ display: 'flex', gap: 8, alignItems: 'center' }}>
                          {room.creator_id === selectedCharacter && room.status === 'waiting' && (
                            <Button
                              size="s"
                              mode="secondary"
                              onClick={() => deleteRoom(room.id)}
                              style={{ backgroundColor: '#ff5c5c', color: '#fff' }}
                            >
                              –£–¥–∞–ª–∏—Ç—å
                            </Button>
                          )}
                          <Button
                            size="s"
                            onClick={() => joinRoom(room.id)}
                            disabled={room.current_players >= room.max_players || room.status !== 'waiting'}
                          >
                            {room.status === 'waiting' ? '–í–æ–π—Ç–∏' : '–ò–≥—Ä–∞ –∏–¥—ë—Ç'}
                          </Button>
                        </div>
                      </div>
                    </Div>
                  </Card>
                ))
              )}
            </Div>
          </Card>
        )}
      </Div>

      {snackbar}

      <ModalRoot activeModal={activeModal} onClose={() => setActiveModal(null)}>
        <ModalPage 
          id="create-room" 
          onClose={() => setActiveModal(null)}
          style={{ backgroundColor: '#1a1a1a' }}
        >
          <ModalPageHeader style={{ backgroundColor: '#2a2a2a', borderBottom: '1px solid #444' }}>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', width: '100%' }}>
              <Text weight="2" style={{ color: '#fff' }}>üÉè –°–æ–∑–¥–∞—Ç—å –ø–æ–∫–µ—Ä–Ω—É—é –∫–æ–º–Ω–∞—Ç—É</Text>
              <Button 
                size="s" 
                onClick={() => setActiveModal(null)}
                style={{ backgroundColor: '#444', color: '#fff' }}
              >
                ‚úï
              </Button>
            </div>
          </ModalPageHeader>
          
          <Card style={{ backgroundColor: '#2a2a2a', border: 'none' }}>
            <Div style={{ backgroundColor: '#2a2a2a' }}>
              <div style={{ marginBottom: 16 }}>
                <Text weight="2" style={{ marginBottom: 8, color: '#fff' }}>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã</Text>
                <Input
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã"
                  value={newRoomName}
                  onChange={(e) => setNewRoomName(e.target.value)}
                />
              </div>
              
              <div style={{ marginBottom: 16 }}>
                <Text weight="2" style={{ marginBottom: 8, color: '#fff' }}>Buy-in (—Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∞)</Text>
                <Input
                  type="number"
                  placeholder="1000"
                  value={newRoomBuyIn}
                  onChange={(e) => setNewRoomBuyIn(e.target.value)}
                  min="100"
                  max={selectedCharacterData?.currency}
                />
                <Text style={{ fontSize: 12, color: '#ccc', marginTop: 4 }}>
                  –î–æ—Å—Ç—É–ø–Ω–æ: {selectedCharacterData?.currency} üí∞
                </Text>
              </div>
              
              <div style={{ marginBottom: 20 }}>
                <Text weight="2" style={{ marginBottom: 8, color: '#fff' }}>–ú–∞–∫—Å–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤</Text>
                <Select
                  value={newRoomMaxPlayers}
                  onChange={(e) => setNewRoomMaxPlayers(e.target.value)}
                  options={[
                    { label: '2 –∏–≥—Ä–æ–∫–∞', value: '2' },
                    { label: '3 –∏–≥—Ä–æ–∫–∞', value: '3' },
                    { label: '4 –∏–≥—Ä–æ–∫–∞', value: '4' },
                    { label: '5 –∏–≥—Ä–æ–∫–æ–≤', value: '5' },
                    { label: '6 –∏–≥—Ä–æ–∫–æ–≤', value: '6' }
                  ]}
                />
              </div>

              <div style={{ 
                padding: '12px', 
                backgroundColor: 'rgba(255,255,255,0.1)', 
                borderRadius: '8px', 
                marginBottom: '16px' 
              }}>
                <Text style={{ fontSize: 12, color: '#ccc' }}>
                  üìù –ë–ª–∞–π–Ω–¥—ã –±—É–¥—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:<br/>
                  –ú–∞–ª—ã–π –±–ª–∞–π–Ω–¥: {Math.floor(parseInt(newRoomBuyIn || '1000') / 200)} üí∞<br/>
                  –ë–æ–ª—å—à–æ–π –±–ª–∞–π–Ω–¥: {Math.floor(parseInt(newRoomBuyIn || '1000') / 100)} üí∞
                </Text>
              </div>
              
              <Button
                size="l"
                onClick={createRoom}
                style={{ backgroundColor: '#4caf50', color: '#fff' }}
                stretched
              >
                –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É
              </Button>
            </Div>
          </Card>
        </ModalPage>
      </ModalRoot>
    </Panel>
  );
};
