import React, { useState, useEffect } from 'react';
import {
  Panel,
  PanelHeader,
  PanelHeaderBack,
  Group,
  Header,
  Button,
  Tabs,
  TabsItem,
  Div,
  Title,
  Text,
  Spinner,
  Snackbar,
  Card,
  SimpleCell,
  Avatar,
  NativeSelect,
  ModalRoot,
  ModalPage,
  ModalPageHeader,
  ButtonGroup,
  Checkbox
} from '@vkontakte/vkui';
import { useRouteNavigator } from '@vkontakte/vk-mini-apps-router';
import { API_URL } from '../api';
import FishingMinigameV2 from '../components/FishingMinigameV2';
import LocationSelector from '../components/LocationSelector';
import { Icon24DoneOutline, Icon24CancelOutline } from '@vkontakte/icons';

interface NavIdProps {
  id: string;
  fetchedUser?: any;
}

const FishingPanelV2: React.FC<NavIdProps> = ({ id, fetchedUser }) => {
  const routeNavigator = useRouteNavigator();
  const [activeTab, setActiveTab] = useState<'game' | 'gear' | 'catch'>('game');
  const [characters, setCharacters] = useState<any[]>([]);
  const [selectedCharacter, setSelectedCharacter] = useState<any | null>(null);
  const [characterId, setCharacterId] = useState<number | null>(null);
  const [credits, setCredits] = useState<number>(0);
  const [loading, setLoading] = useState(false);
  const [snackbar, setSnackbar] = useState<React.ReactNode | null>(null);
  
  // Gear state
  const [availableGear, setAvailableGear] = useState<any[]>([]);
  const [selectedGearIds, setSelectedGearIds] = useState<number[]>([]);
  
  // Session state
  const [sessionData, setSessionData] = useState<any>(null);
  const [minigameActive, setMinigameActive] = useState(false);
  const [showLocationSelector, setShowLocationSelector] = useState(false);
  
  // Catch history
  const [catchHistory, setCatchHistory] = useState<any[]>([]);

  useEffect(() => {
    loadCharacters();
  }, []);

  useEffect(() => {
    if (characterId) {
      loadGear();
      loadCatchHistory();
    }
  }, [characterId]);

  const loadCharacters = async () => {
    if (!fetchedUser?.id) return;
    
    setLoading(true);
    try {
      const response = await fetch(`${API_URL}/my-anketas/${fetchedUser.id}`);
      const data = await response.json();
      
      const acceptedChars = data.filter((char: any) => 
        char.status === '–ü—Ä–∏–Ω—è—Ç–æ' && 
        (char.life_status === '–ñ–∏–≤' || char.life_status === '–ñ–∏–≤–∞')
      );
      
      if (acceptedChars.length > 0) {
        setCharacters(acceptedChars);
        const firstChar = acceptedChars[0];
        setSelectedCharacter(firstChar);
        setCharacterId(firstChar.id);
        setCredits(firstChar.currency || 0);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:', error);
      showSnackbar('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π', false);
    }
    setLoading(false);
  };

  const loadGear = async () => {
    if (!characterId) return;
    
    try {
      const response = await fetch(`${API_URL}/fishing/gear/${characterId}`);
      const data = await response.json();
      
      if (data.success) {
        setAvailableGear(data.gear || []);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è:', error);
    }
  };

  const loadCatchHistory = async () => {
    if (!characterId) return;
    
    try {
      const response = await fetch(`${API_URL}/fishing/inventory/${characterId}`);
      const data = await response.json();
      
      if (data.success) {
        setCatchHistory(data.fish || []);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–ª–æ–≤–∞:', error);
    }
  };

  const startFishing = async (locationId: number) => {
    if (!characterId) return;
    
    setLoading(true);
    try {
      const response = await fetch(`${API_URL}/fishing/start-v2`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          character_id: characterId,
          location_id: locationId,
          gear_ids: selectedGearIds
        })
      });
      
      const data = await response.json();
      
      if (data.success) {
        setSessionData(data);
        setMinigameActive(true);
        setShowLocationSelector(false);
      } else {
        showSnackbar(data.message || '–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ä—ã–±–∞–ª–∫–∏', false);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ä—ã–±–∞–ª–∫–∏:', error);
      showSnackbar('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', false);
    }
    setLoading(false);
  };

  const completeFishing = async (success: boolean, score: number, perfectHits: number) => {
    if (!characterId || !sessionData) return;
    
    setLoading(true);
    try {
      const response = await fetch(`${API_URL}/fishing/complete-v2`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          character_id: characterId,
          location_id: sessionData.location_id,
          gear_ids: sessionData.gear_ids,
          success,
          minigame_score: score,
          perfect_hits: perfectHits
        })
      });
      
      const data = await response.json();
      
      if (data.success) {
        if (data.catch) {
          showSnackbar(`–ü–æ–π–º–∞–Ω–æ: ${data.catch.species_name} (${data.catch.mutation_class})!`, true);
        }
        if (data.materials && data.materials.length > 0) {
          showSnackbar(`–ü–æ–ª—É—á–µ–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: ${data.materials.length}`, true);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        await loadCharacters();
        await loadCatchHistory();
      } else {
        showSnackbar(data.message || '–ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–π–º–∞–Ω–æ', false);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä—ã–±–∞–ª–∫–∏:', error);
      showSnackbar('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', false);
    }
    
    setMinigameActive(false);
    setSessionData(null);
    setLoading(false);
  };

  const toggleGear = (gearId: number) => {
    setSelectedGearIds(prev => 
      prev.includes(gearId) 
        ? prev.filter(id => id !== gearId)
        : [...prev, gearId]
    );
  };

  const showSnackbar = (message: string, success: boolean) => {
    setSnackbar(
      <Snackbar
        onClose={() => setSnackbar(null)}
        before={
          <Avatar size={24} style={{ background: success ? 'var(--vkui--color_accent_green)' : 'var(--vkui--color_accent_red)' }}>
            {success ? <Icon24DoneOutline fill="#fff" /> : <Icon24CancelOutline fill="#fff" />}
          </Avatar>
        }
      >
        {message}
      </Snackbar>
    );
  };

  const getRankColor = (rank: string) => {
    const colors: { [key: string]: string } = {
      F: '#9E9E9E',
      E: '#8BC34A',
      D: '#03A9F4',
      C: '#9C27B0',
      B: '#FF9800',
      A: '#F44336',
      S: '#E91E63',
      SS: '#9C27B0',
      SSS: '#FFD700'
    };
    return colors[rank] || '#9E9E9E';
  };

  if (loading && !characterId) {
    return (
      <Panel id={id}>
        <PanelHeader before={<PanelHeaderBack onClick={() => routeNavigator.back()} />}>
          üé£ –†—ã–±–∞–ª–∫–∞ V2
        </PanelHeader>
        <Div style={{ display: 'flex', justifyContent: 'center', padding: 32 }}>
          <Spinner size="l" />
        </Div>
      </Panel>
    );
  }

  if (!characterId) {
    return (
      <Panel id={id}>
        <PanelHeader before={<PanelHeaderBack onClick={() => routeNavigator.back()} />}>
          üé£ –†—ã–±–∞–ª–∫–∞ V2
        </PanelHeader>
        <Div>
          <Card mode="shadow" style={{ padding: 24, textAlign: 'center' }}>
            <Text>–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä—ã–±–∞–ª–∫–∏</Text>
            <Button size="l" mode="primary" onClick={() => routeNavigator.push('/anketa')} style={{ marginTop: 16 }}>
              –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            </Button>
          </Card>
        </Div>
      </Panel>
    );
  }

  return (
    <Panel id={id}>
      <PanelHeader before={<PanelHeaderBack onClick={() => routeNavigator.back()} />}>
        üé£ –†—ã–±–∞–ª–∫–∞ V2
      </PanelHeader>

      {/* Character Info */}
      <Card mode="shadow" style={{ margin: 12, padding: 16 }}>
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <div>
            <Title level="3">{selectedCharacter?.character_name}</Title>
            <Text style={{ color: 'var(--text_secondary)' }}>
              –†–∞–Ω–≥: <span style={{ color: getRankColor(selectedCharacter?.rank), fontWeight: 'bold' }}>{selectedCharacter?.rank}</span>
            </Text>
          </div>
          <div style={{ textAlign: 'right' }}>
            <Text style={{ fontSize: 20, fontWeight: 'bold' }}>üí∞ {credits.toLocaleString()}</Text>
            <Text style={{ color: 'var(--text_secondary)', fontSize: 12 }}>–ö—Ä–µ–¥–∏—Ç—ã</Text>
          </div>
        </div>

        {characters.length > 1 && (
          <NativeSelect
            value={characterId?.toString()}
            onChange={(e) => {
              const id = parseInt(e.target.value);
              const char = characters.find(c => c.id === id);
              setCharacterId(id);
              setSelectedCharacter(char);
              setCredits(char?.currency || 0);
            }}
            style={{ marginTop: 12 }}
          >
            {characters.map(char => (
              <option key={char.id} value={char.id}>
                {char.character_name} ({char.rank})
              </option>
            ))}
          </NativeSelect>
        )}
      </Card>

      {/* Quick Actions */}
      <Div>
        <ButtonGroup mode="horizontal" gap="m" stretched>
          <Button
            size="l"
            mode="primary"
            stretched
            onClick={() => setShowLocationSelector(true)}
            loading={loading}
          >
            üé£ –ù–∞—á–∞—Ç—å —Ä—ã–±–∞–ª–∫—É
          </Button>
          <Button
            size="l"
            mode="secondary"
            stretched
            onClick={() => routeNavigator.push('/materials')}
          >
            üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã
          </Button>
          <Button
            size="l"
            mode="secondary"
            stretched
            onClick={() => routeNavigator.push('/crafting')}
          >
            üî® –ö—Ä–∞—Ñ—Ç
          </Button>
        </ButtonGroup>
      </Div>

      {/* Tabs */}
      <Tabs mode="default">
        <TabsItem selected={activeTab === 'game'} onClick={() => setActiveTab('game')}>
          –†—ã–±–∞–ª–∫–∞
        </TabsItem>
        <TabsItem selected={activeTab === 'gear'} onClick={() => setActiveTab('gear')}>
          –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ
        </TabsItem>
        <TabsItem selected={activeTab === 'catch'} onClick={() => setActiveTab('catch')}>
          –£–ª–æ–≤
        </TabsItem>
      </Tabs>

      {/* Game Tab */}
      {activeTab === 'game' && (
        <Div>
          <Card mode="shadow" style={{ padding: 16, marginBottom: 12 }}>
            <Title level="2">üåä –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ä—ã–±–∞–ª–∫—É!</Title>
            <Text style={{ marginTop: 8, color: 'var(--text_secondary)' }}>
              –í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –∏ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä—ã–±–∞–ª–∫—É. –í Echo-–∑–æ–Ω–∞—Ö –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –º—É—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤–∞!
            </Text>
          </Card>

          <Card mode="shadow" style={{ padding: 16 }}>
            <Title level="3">üéØ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ V2 —Å–∏—Å—Ç–µ–º—ã</Title>
            <ul style={{ paddingLeft: 20, color: 'var(--text_secondary)' }}>
              <li>Echo-–∑–æ–Ω—ã —Å –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é –∏ –Ω–∞–≥—Ä–∞–¥–∞–º–∏</li>
              <li>–ö–ª–∞—Å—Å—ã –º—É—Ç–∞—Ü–∏–π: –ó–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ, –ò—Å–∫–∞–∂—ë–Ω–Ω—ã–µ, –ë–µ—Å—Ç–∏–∏</li>
              <li>–°–∏—Å—Ç–µ–º–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –∫—Ä–∞—Ñ—Ç–∏–Ω–≥–∞ –°–∏–Ω–∫–∏</li>
              <li>–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ —Å —Å–∏–Ω–µ—Ä–≥–∏—è–º–∏</li>
              <li>–°–æ–±—ã—Ç–∏—è –∏ —Å–µ–∑–æ–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏</li>
            </ul>
          </Card>
        </Div>
      )}

      {/* Gear Tab */}
      {activeTab === 'gear' && (
        <Div>
          <Card mode="shadow" style={{ padding: 16, marginBottom: 12 }}>
            <Title level="2">üé£ –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ</Title>
            <Text style={{ color: 'var(--text_secondary)' }}>
              –í—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ –¥–ª—è —Ä—ã–±–∞–ª–∫–∏. –†–∞–∑–Ω–æ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ –¥–∞—ë—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –±–æ–Ω—É—Å—ã.
            </Text>
          </Card>

          {availableGear.length === 0 ? (
            <Card mode="shadow" style={{ padding: 24, textAlign: 'center' }}>
              <Text>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è</Text>
              <Button size="m" mode="primary" onClick={() => routeNavigator.push('/market')} style={{ marginTop: 12 }}>
                –ú–∞–≥–∞–∑–∏–Ω
              </Button>
            </Card>
          ) : (
            <Group header={<Header>–î–æ—Å—Ç—É–ø–Ω–æ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ</Header>}>
              {availableGear.map(gear => (
                <SimpleCell
                  key={gear.id}
                  before={
                    <Checkbox
                      checked={selectedGearIds.includes(gear.id)}
                      onChange={() => toggleGear(gear.id)}
                    />
                  }
                  subtitle={gear.description}
                  after={
                    <Text style={{ fontSize: 12, color: 'var(--text_secondary)' }}>
                      {gear.gear_type}
                    </Text>
                  }
                >
                  {gear.name}
                </SimpleCell>
              ))}
            </Group>
          )}
        </Div>
      )}

      {/* Catch Tab */}
      {activeTab === 'catch' && (
        <Div>
          <Card mode="shadow" style={{ padding: 16, marginBottom: 12 }}>
            <Title level="2">üêü –ò—Å—Ç–æ—Ä–∏—è —É–ª–æ–≤–∞</Title>
            <Text style={{ color: 'var(--text_secondary)' }}>
              –í—Å–µ–≥–æ –ø–æ–π–º–∞–Ω–æ: {catchHistory.length}
            </Text>
          </Card>

          {catchHistory.length === 0 ? (
            <Card mode="shadow" style={{ padding: 24, textAlign: 'center' }}>
              <Text>–í—ã –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–π–º–∞–ª–∏</Text>
            </Card>
          ) : (
            <Group header={<Header>–ü–æ—Å–ª–µ–¥–Ω–∏–π —É–ª–æ–≤</Header>}>
              {catchHistory.slice(0, 20).map((fish, index) => (
                <SimpleCell
                  key={index}
                  subtitle={`${fish.location_name} ‚Ä¢ ${new Date(fish.caught_at).toLocaleDateString()}`}
                  after={
                    <div style={{ textAlign: 'right' }}>
                      <Text style={{ fontWeight: 'bold' }}>üí∞ {fish.base_price?.toLocaleString()}</Text>
                      <Text style={{ fontSize: 12, color: 'var(--text_secondary)' }}>{fish.weight}–∫–≥</Text>
                    </div>
                  }
                  before={
                    <div style={{
                      width: 40,
                      height: 40,
                      borderRadius: 8,
                      background: 'var(--vkui--color_background_accent)',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      fontSize: 20
                    }}>
                      üêü
                    </div>
                  }
                >
                  {fish.name}
                </SimpleCell>
              ))}
            </Group>
          )}
        </Div>
      )}

      {/* Modals */}
      <ModalRoot
        activeModal={showLocationSelector ? 'location' : (minigameActive ? 'minigame' : null)}
        onClose={() => {
          setShowLocationSelector(false);
          setMinigameActive(false);
        }}
      >
        {/* Location Selector Modal */}
        <ModalPage
          id="location"
          onClose={() => setShowLocationSelector(false)}
          header={<ModalPageHeader>–í—ã–±–æ—Ä –ª–æ–∫–∞—Ü–∏–∏</ModalPageHeader>}
        >
          {characterId && (
            <LocationSelector
              activityType="fishing"
              characterRank={selectedCharacter?.rank || 'F'}
              onSelectLocation={(locationId) => startFishing(locationId)}
              onCancel={() => setShowLocationSelector(false)}
            />
          )}
        </ModalPage>

        {/* Minigame Modal */}
        <ModalPage
          id="minigame"
          onClose={() => {
            setMinigameActive(false);
            setSessionData(null);
          }}
          header={<ModalPageHeader>–†—ã–±–∞–ª–∫–∞</ModalPageHeader>}
        >
          {sessionData && (
            <FishingMinigameV2
              difficulty={sessionData.difficulty}
              waterConditions={sessionData.waterConditions}
              echoZone={sessionData.echoZone}
              onComplete={completeFishing}
              onCancel={() => {
                setMinigameActive(false);
                setSessionData(null);
              }}
            />
          )}
        </ModalPage>
      </ModalRoot>

      {snackbar}
    </Panel>
  );
};

export default FishingPanelV2;

