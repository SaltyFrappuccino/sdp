import React, { useState, useEffect } from 'react';
import { Card, Title, Text, Div, Button, Spinner, Group, Header, SimpleCell, Tabs, TabsItem, Progress, Badge } from '@vkontakte/vkui';

interface EncounteredCreature {
  species_id: number;
  name: string;
  mutation_class: string;
  danger_rank: string;
  habitat_type: string;
  times_encountered: number;
  times_caught: number;
  best_quality: number;
  total_materials: number;
  first_encounter: string;
  last_encounter: string;
}

interface HuntingStats {
  totalAttempts: number;
  successfulHunts: number;
  failedHunts: number;
  successRate: number;
  totalMaterialsCollected: number;
  totalValueEarned: number;
  favoriteLocation: string;
  rarest_catch: string;
}

interface Achievement {
  id: string;
  name: string;
  description: string;
  icon: string;
  completed: boolean;
  progress: number;
  maxProgress: number;
}

interface HunterJournalProps {
  characterId: number;
  onClose?: () => void;
}

const HunterJournal: React.FC<HunterJournalProps> = ({ characterId, onClose }) => {
  const [activeTab, setActiveTab] = useState<'creatures' | 'stats' | 'achievements'>('creatures');
  const [creatures, setCreatures] = useState<EncounteredCreature[]>([]);
  const [stats, setStats] = useState<HuntingStats | null>(null);
  const [achievements, setAchievements] = useState<Achievement[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchJournalData();
  }, [characterId]);

  const fetchJournalData = async () => {
    try {
      setLoading(true);
      await Promise.all([
        fetchEncounteredCreatures(),
        fetchHuntingStats(),
        fetchAchievements()
      ]);
    } finally {
      setLoading(false);
    }
  };

  const fetchEncounteredCreatures = async () => {
    try {
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ BestiaryResearchNotes + —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      const response = await fetch(`https://sdp-back-production.up.railway.app/api/bestiary/encountered/${characterId}`);
      const data = await response.json();
      setCreatures(data || []);
    } catch (error) {
      console.error('Error fetching creatures:', error);
      // Fallback –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      setCreatures([
        {
          species_id: 1,
          name: '–ö–∞–º–µ–Ω–Ω—ã–π –ö–∞–±–∞–Ω',
          mutation_class: '–ó–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ',
          danger_rank: 'E',
          habitat_type: '–ù–∞–∑–µ–º–Ω—ã–µ',
          times_encountered: 15,
          times_caught: 12,
          best_quality: 87,
          total_materials: 48,
          first_encounter: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),
          last_encounter: new Date().toISOString()
        }
      ]);
    }
  };

  const fetchHuntingStats = async () => {
    try {
      const response = await fetch(`https://sdp-back-production.up.railway.app/api/hunting/stats/${characterId}`);
      const data = await response.json();
      setStats(data || {
        totalAttempts: 25,
        successfulHunts: 18,
        failedHunts: 7,
        successRate: 72,
        totalMaterialsCollected: 156,
        totalValueEarned: 12500000,
        favoriteLocation: '–õ–µ—Å–∞ –ú–∏–¥–∑—É',
        rarest_catch: '–ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–π –í–æ–ª–∫ (–ë–µ—Å—Ç–∏—è)'
      });
    } catch (error) {
      console.error('Error fetching stats:', error);
    }
  };

  const fetchAchievements = async () => {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    const allAchievements: Achievement[] = [
      {
        id: 'first_catch',
        name: '–ü–µ—Ä–≤–∞—è –¥–æ–±—ã—á–∞',
        description: '–£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–≤—É—é –æ—Ö–æ—Ç—É',
        icon: 'üéØ',
        completed: true,
        progress: 1,
        maxProgress: 1
      },
      {
        id: 'hunter_10',
        name: '–ù–∞—á–∏–Ω–∞—é—â–∏–π –æ—Ö–æ—Ç–Ω–∏–∫',
        description: '–°–æ–≤–µ—Ä—à–∏—Ç–µ 10 —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ö–æ—Ç',
        icon: 'üèπ',
        completed: true,
        progress: 10,
        maxProgress: 10
      },
      {
        id: 'hunter_50',
        name: '–û–ø—ã—Ç–Ω—ã–π –æ—Ö–æ—Ç–Ω–∏–∫',
        description: '–°–æ–≤–µ—Ä—à–∏—Ç–µ 50 —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ö–æ—Ç',
        icon: 'ü¶å',
        completed: false,
        progress: 18,
        maxProgress: 50
      },
      {
        id: 'beast_slayer',
        name: '–£–∫—Ä–æ—Ç–∏—Ç–µ–ª—å –ë–µ—Å—Ç–∏–π',
        description: '–ü–æ–±–µ–¥–∏—Ç–µ –ë–µ—Å—Ç–∏—é',
        icon: '‚öîÔ∏è',
        completed: false,
        progress: 0,
        maxProgress: 1
      },
      {
        id: 'perfect_hunter',
        name: '–ò–¥–µ–∞–ª—å–Ω—ã–π –æ—Ö–æ—Ç–Ω–∏–∫',
        description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 95%+ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–æ–±—ã—á–∏',
        icon: 'üíé',
        completed: false,
        progress: 87,
        maxProgress: 95
      },
      {
        id: 'echo_explorer',
        name: '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –≠—Ö–æ-–ó–æ–Ω',
        description: '–û—Ö–æ—Ç—å—Ç–µ—Å—å –≤ 5 —Ä–∞–∑–Ω—ã—Ö –≠—Ö–æ-–ó–æ–Ω–∞—Ö',
        icon: '‚ö°',
        completed: false,
        progress: 2,
        maxProgress: 5
      },
      {
        id: 'material_collector',
        name: '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤',
        description: '–°–æ–±–µ—Ä–∏—Ç–µ 100 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤',
        icon: 'üì¶',
        completed: true,
        progress: 156,
        maxProgress: 100
      },
      {
        id: 'crafter',
        name: '–ú–∞—Å—Ç–µ—Ä-—Ä–µ–º–µ—Å–ª–µ–Ω–Ω–∏–∫',
        description: '–°–æ–∑–¥–∞–π—Ç–µ 10 –°–∏–Ω–∫–∏',
        icon: '‚öíÔ∏è',
        completed: false,
        progress: 3,
        maxProgress: 10
      }
    ];
    
    setAchievements(allAchievements);
  };

  const getMutationClassColor = (mutationClass: string) => {
    switch (mutationClass) {
      case '–ó–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ':
        return '#4CAF50';
      case '–ò—Å–∫–∞–∂—ë–Ω–Ω—ã–µ':
        return '#FF9800';
      case '–ë–µ—Å—Ç–∏–∏':
        return '#F44336';
      default:
        return '#9E9E9E';
    }
  };

  const getRankColor = (rank: string) => {
    const colors: any = {
      F: '#9E9E9E',
      E: '#795548',
      D: '#4CAF50',
      C: '#2196F3',
      B: '#9C27B0',
      A: '#FF9800',
      S: '#F44336',
      SS: '#E91E63',
      SSS: '#FFD700'
    };
    return colors[rank] || '#9E9E9E';
  };

  if (loading) {
    return (
      <Div style={{ display: 'flex', justifyContent: 'center', padding: 32 }}>
        <Spinner size="l" />
      </Div>
    );
  }

  return (
    <Div>
      <Card mode="shadow" style={{ marginBottom: 16, padding: 16 }}>
        <Title level="2">üìñ –ñ—É—Ä–Ω–∞–ª –æ—Ö–æ—Ç–Ω–∏–∫–∞</Title>
      </Card>

      <Tabs>
        <TabsItem
          selected={activeTab === 'creatures'}
          onClick={() => setActiveTab('creatures')}
        >
          –°—É—â–µ—Å—Ç–≤–∞
        </TabsItem>
        <TabsItem
          selected={activeTab === 'stats'}
          onClick={() => setActiveTab('stats')}
        >
          –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        </TabsItem>
        <TabsItem
          selected={activeTab === 'achievements'}
          onClick={() => setActiveTab('achievements')}
        >
          –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        </TabsItem>
      </Tabs>

      {/* –í–∫–ª–∞–¥–∫–∞: –°—É—â–µ—Å—Ç–≤–∞ */}
      {activeTab === 'creatures' && (
        <div style={{ marginTop: 16 }}>
          {creatures.length === 0 && (
            <Card mode="shadow" style={{ padding: 24, textAlign: 'center' }}>
              <Text style={{ color: 'var(--text_secondary)' }}>
                –í—ã –µ—â—ë –Ω–µ –≤—Å—Ç—Ä–µ—á–∞–ª–∏ —Å—É—â–µ—Å—Ç–≤.<br/>
                –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ—Å—å –Ω–∞ –æ—Ö–æ—Ç—É!
              </Text>
            </Card>
          )}

          <Group header={<Header>–í—Å—Ç—Ä–µ—á–µ–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤–∞ ({creatures.length})</Header>}>
            {creatures.map(creature => (
              <Card
                key={creature.species_id}
                mode="shadow"
                style={{ marginBottom: 12, padding: 16 }}
              >
                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', marginBottom: 8 }}>
                  <div>
                    <Title level="3">{creature.name}</Title>
                    <div style={{ display: 'flex', gap: 8, marginTop: 4 }}>
                      <Badge
                        mode="prominent"
                        style={{
                          background: getMutationClassColor(creature.mutation_class),
                          color: 'white',
                          fontSize: 11
                        }}
                      >
                        {creature.mutation_class}
                      </Badge>
                      <Badge
                        mode="prominent"
                        style={{
                          background: getRankColor(creature.danger_rank),
                          color: 'white',
                          fontSize: 11
                        }}
                      >
                        {creature.danger_rank}
                      </Badge>
                      <Badge mode="prominent" style={{ fontSize: 11 }}>
                        {creature.habitat_type}
                      </Badge>
                    </div>
                  </div>
                </div>

                <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 12, marginTop: 12 }}>
                  <div>
                    <Text style={{ fontSize: 12, color: 'var(--text_secondary)' }}>–í—Å—Ç—Ä–µ—á–µ–Ω–æ</Text>
                    <Text style={{ fontSize: 18, fontWeight: 'bold' }}>{creature.times_encountered}</Text>
                  </div>
                  <div>
                    <Text style={{ fontSize: 12, color: 'var(--text_secondary)' }}>–ü–æ–π–º–∞–Ω–æ</Text>
                    <Text style={{ fontSize: 18, fontWeight: 'bold', color: '#4CAF50' }}>{creature.times_caught}</Text>
                  </div>
                  <div>
                    <Text style={{ fontSize: 12, color: 'var(--text_secondary)' }}>–õ—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ</Text>
                    <Text style={{ fontSize: 18, fontWeight: 'bold' }}>{creature.best_quality}%</Text>
                  </div>
                  <div>
                    <Text style={{ fontSize: 12, color: 'var(--text_secondary)' }}>–ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤</Text>
                    <Text style={{ fontSize: 18, fontWeight: 'bold' }}>{creature.total_materials}</Text>
                  </div>
                </div>

                <div style={{ marginTop: 12, paddingTop: 12, borderTop: '1px solid var(--separator_common)' }}>
                  <Text style={{ fontSize: 12, color: 'var(--text_secondary)' }}>
                    –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {creature.times_encountered > 0 
                      ? Math.round((creature.times_caught / creature.times_encountered) * 100) 
                      : 0}%
                  </Text>
                  <Progress 
                    value={creature.times_encountered > 0 
                      ? (creature.times_caught / creature.times_encountered) * 100 
                      : 0} 
                    style={{ marginTop: 4 }}
                  />
                </div>
              </Card>
            ))}
          </Group>
        </div>
      )}

      {/* –í–∫–ª–∞–¥–∫–∞: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      {activeTab === 'stats' && stats && (
        <div style={{ marginTop: 16 }}>
          <Card mode="shadow" style={{ marginBottom: 16, padding: 16 }}>
            <Title level="3" style={{ marginBottom: 16 }}>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</Title>
            
            <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 16, marginBottom: 16 }}>
              <div style={{ textAlign: 'center' }}>
                <Text style={{ fontSize: 32, fontWeight: 'bold', display: 'block' }}>
                  {stats.totalAttempts}
                </Text>
                <Text style={{ fontSize: 14, color: 'var(--text_secondary)' }}>
                  –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫
                </Text>
              </div>
              <div style={{ textAlign: 'center' }}>
                <Text style={{ fontSize: 32, fontWeight: 'bold', display: 'block', color: '#4CAF50' }}>
                  {stats.successfulHunts}
                </Text>
                <Text style={{ fontSize: 14, color: 'var(--text_secondary)' }}>
                  –£—Å–ø–µ—à–Ω—ã—Ö –æ—Ö–æ—Ç
                </Text>
              </div>
            </div>

            <div style={{ marginBottom: 16 }}>
              <Text style={{ marginBottom: 4 }}>–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats.successRate.toFixed(1)}%</Text>
              <Progress value={stats.successRate} />
            </div>

            <div style={{ 
              display: 'grid', 
              gridTemplateColumns: '1fr 1fr', 
              gap: 16,
              paddingTop: 16,
              borderTop: '1px solid var(--separator_common)'
            }}>
              <div>
                <Text style={{ fontSize: 12, color: 'var(--text_secondary)', marginBottom: 4 }}>
                  –ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å–æ–±—Ä–∞–Ω–æ
                </Text>
                <Text style={{ fontSize: 20, fontWeight: 'bold' }}>
                  {stats.totalMaterialsCollected}
                </Text>
              </div>
              <div>
                <Text style={{ fontSize: 12, color: 'var(--text_secondary)', marginBottom: 4 }}>
                  –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ
                </Text>
                <Text style={{ fontSize: 20, fontWeight: 'bold', color: '#FFC107' }}>
                  {(stats.totalValueEarned / 1000000).toFixed(1)}–ú‚Ç≠
                </Text>
              </div>
            </div>
          </Card>

          <Card mode="shadow" style={{ padding: 16 }}>
            <Title level="3" style={{ marginBottom: 12 }}>–†–µ–∫–æ—Ä–¥—ã</Title>
            
            <SimpleCell
              before={<div style={{ fontSize: 24 }}>üèÜ</div>}
              subtitle="–õ—é–±–∏–º–∞—è –ª–æ–∫–∞—Ü–∏—è"
            >
              {stats.favoriteLocation}
            </SimpleCell>
            
            <SimpleCell
              before={<div style={{ fontSize: 24 }}>‚≠ê</div>}
              subtitle="–†–µ–¥—á–∞–π—à–∞—è –¥–æ–±—ã—á–∞"
            >
              {stats.rarest_catch}
            </SimpleCell>
          </Card>
        </div>
      )}

      {/* –í–∫–ª–∞–¥–∫–∞: –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è */}
      {activeTab === 'achievements' && (
        <div style={{ marginTop: 16 }}>
          <Group header={
            <Header>
              –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è ({achievements.filter(a => a.completed).length}/{achievements.length})
            </Header>
          }>
            {achievements.map(achievement => (
              <Card
                key={achievement.id}
                mode="shadow"
                style={{
                  marginBottom: 12,
                  padding: 16,
                  opacity: achievement.completed ? 1 : 0.7
                }}
              >
                <div style={{ display: 'flex', alignItems: 'flex-start', gap: 12 }}>
                  <div style={{
                    fontSize: 40,
                    filter: achievement.completed ? 'none' : 'grayscale(100%)'
                  }}>
                    {achievement.icon}
                  </div>
                  
                  <div style={{ flex: 1 }}>
                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 4 }}>
                      <Title level="3">{achievement.name}</Title>
                      {achievement.completed && (
                        <Badge mode="prominent" style={{ background: '#4CAF50', color: 'white' }}>
                          ‚úì
                        </Badge>
                      )}
                    </div>
                    
                    <Text style={{ fontSize: 14, color: 'var(--text_secondary)', marginBottom: 8 }}>
                      {achievement.description}
                    </Text>
                    
                    {!achievement.completed && (
                      <div>
                        <Text style={{ fontSize: 12, marginBottom: 4 }}>
                          {achievement.progress}/{achievement.maxProgress}
                        </Text>
                        <Progress value={(achievement.progress / achievement.maxProgress) * 100} />
                      </div>
                    )}
                  </div>
                </div>
              </Card>
            ))}
          </Group>
        </div>
      )}

      {onClose && (
        <Button size="l" mode="secondary" onClick={onClose} stretched style={{ marginTop: 16 }}>
          –ó–∞–∫—Ä—ã—Ç—å
        </Button>
      )}
    </Div>
  );
};

export default HunterJournal;

