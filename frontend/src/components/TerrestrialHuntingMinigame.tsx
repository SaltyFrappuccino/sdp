import React, { useState, useEffect, useCallback } from 'react';
import { Button, Progress, Card, Title, Text, Div } from '@vkontakte/vkui';

interface TerrestrialHuntingMinigameProps {
  difficulty: number;  // –û—Ç 0.5 –¥–æ 2.0 (–æ—Ç –±—Ä–æ–Ω–∏)
  onComplete: (success: boolean) => void;
  onCancel: () => void;
}

const TerrestrialHuntingMinigame: React.FC<TerrestrialHuntingMinigameProps> = ({ 
  difficulty, 
  onComplete, 
  onCancel 
}) => {
  const [gameState, setGameState] = useState<'waiting' | 'tracking' | 'aiming' | 'completed'>('waiting');
  const [trackingProgress, setTrackingProgress] = useState(0);
  const [targetPosition, setTargetPosition] = useState({ x: 50, y: 50 });
  const [crosshairPosition, setCrosshairPosition] = useState({ x: 20, y: 20 });
  const [timeLeft, setTimeLeft] = useState(0);
  const [accuracy, setAccuracy] = useState(0);
  const [currentDirection, setCurrentDirection] = useState<'up' | 'down' | 'left' | 'right' | null>(null);

  // –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
  const startGame = () => {
    setGameState('tracking');
    setTrackingProgress(0);
    setTimeLeft(Math.floor(8000 / difficulty)); // –û—Ç 4 –¥–æ 16 —Å–µ–∫—É–Ω–¥
    setTargetPosition({ x: 50, y: 50 });
    setCrosshairPosition({ x: 20, y: 20 });
    setAccuracy(0);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ä–∞–∑—É
    const directions: Array<'up' | 'down' | 'left' | 'right'> = ['up', 'down', 'left', 'right'];
    const randomDirection = directions[Math.floor(Math.random() * directions.length)];
    setCurrentDirection(randomDirection);
  };

  // –§–∞–∑–∞ 1: –í—ã—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ (–Ω–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ)
  useEffect(() => {
    if (gameState !== 'tracking') return;

    const timer = setInterval(() => {
      setTimeLeft(prev => {
        if (prev <= 0) {
          setGameState('completed');
          onComplete(false);
          return 0;
        }
        return prev - 50;
      });
    }, 50);

    return () => clearInterval(timer);
  }, [gameState, difficulty, onComplete]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  const handleDirectionClick = (direction: 'up' | 'down' | 'left' | 'right') => {
    if (gameState !== 'tracking') return;

    if (direction === currentDirection) {
      // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
      const increment = 15 + (difficulty - 1) * 5;  // –ß–µ–º —Å–ª–æ–∂–Ω–µ–µ, —Ç–µ–º –º–µ–¥–ª–µ–Ω–Ω–µ–µ –ø—Ä–æ–≥—Ä–µ—Å—Å
      const newProgress = Math.min(100, trackingProgress + increment);
      setTrackingProgress(newProgress);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ–∞–∑—ã
      if (newProgress >= 100) {
        setGameState('aiming');
        setTimeLeft(Math.floor(5000 / difficulty)); // –û—Ç 2.5 –¥–æ 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø—Ä–∏—Ü–µ–ª
        return;
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ä–∞–∑—É
      const directions: Array<'up' | 'down' | 'left' | 'right'> = ['up', 'down', 'left', 'right'];
      const randomDirection = directions[Math.floor(Math.random() * directions.length)];
      setCurrentDirection(randomDirection);
    } else {
      // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
      setTrackingProgress(prev => Math.max(0, prev - 10));
    }
  };

  // –§–∞–∑–∞ 2: –ü—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏–µ (–ø–µ—Ä–µ–º–µ—â–∞–π –ø—Ä–∏—Ü–µ–ª –∫ —Ü–µ–ª–∏)
  useEffect(() => {
    if (gameState !== 'aiming') return;

    // –¶–µ–ª—å –¥–≤–∏–∂–µ—Ç—Å—è
    const targetMovement = setInterval(() => {
      setTargetPosition(prev => {
        const speed = 0.5 + difficulty * 0.3;
        const angle = Math.random() * Math.PI * 2;
        const newX = Math.max(10, Math.min(90, prev.x + Math.cos(angle) * speed));
        const newY = Math.max(10, Math.min(90, prev.y + Math.sin(angle) * speed));
        return { x: newX, y: newY };
      });
    }, 100);

    // –¢–∞–π–º–µ—Ä
    const timer = setInterval(() => {
      setTimeLeft(prev => {
        if (prev <= 0) {
          clearInterval(timer);
          clearInterval(targetMovement);
          setGameState('completed');
          onComplete(false);
          return 0;
        }
        return prev - 50;
      });
    }, 50);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏
    const accuracyCheck = setInterval(() => {
      const distance = Math.sqrt(
        Math.pow(targetPosition.x - crosshairPosition.x, 2) + 
        Math.pow(targetPosition.y - crosshairPosition.y, 2)
      );
      const newAccuracy = Math.max(0, 100 - distance * 2);
      setAccuracy(newAccuracy);
    }, 50);

    return () => {
      clearInterval(targetMovement);
      clearInterval(timer);
      clearInterval(accuracyCheck);
    };
  }, [gameState, difficulty, onComplete, targetPosition, crosshairPosition]);

  // –î–≤–∏–∂–µ–Ω–∏–µ –ø—Ä–∏—Ü–µ–ª–∞
  const moveCrosshair = (direction: 'up' | 'down' | 'left' | 'right') => {
    if (gameState !== 'aiming') return;

    const speed = 3;
    setCrosshairPosition(prev => {
      let newX = prev.x;
      let newY = prev.y;

      if (direction === 'up') newY = Math.max(10, prev.y - speed);
      if (direction === 'down') newY = Math.min(90, prev.y + speed);
      if (direction === 'left') newX = Math.max(10, prev.x - speed);
      if (direction === 'right') newX = Math.min(90, prev.x + speed);

      return { x: newX, y: newY };
    });
  };

  // –í—ã—Å—Ç—Ä–µ–ª
  const shoot = () => {
    if (gameState !== 'aiming') return;

    const distance = Math.sqrt(
      Math.pow(targetPosition.x - crosshairPosition.x, 2) + 
      Math.pow(targetPosition.y - crosshairPosition.y, 2)
    );

    // –£—Å–ø–µ—Ö, –µ—Å–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—å—à–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞
    const successThreshold = 8 + difficulty * 2;  // –ß–µ–º —Å–ª–æ–∂–Ω–µ–µ, —Ç–µ–º –º–µ–Ω—å—à–µ –¥–æ–ø—É—Å–∫
    const success = distance < successThreshold;

    setGameState('completed');
    onComplete(success);
  };

  return (
    <Card mode="shadow" style={{ margin: '16px', padding: '16px' }}>
      <Title level="2" style={{ marginBottom: '12px' }}>üêæ –ù–∞–∑–µ–º–Ω–∞—è –æ—Ö–æ—Ç–∞</Title>

      {gameState === 'waiting' && (
        <Div>
          <Text style={{ marginBottom: '16px' }}>
            –°–ª–æ–∂–Ω–æ—Å—Ç—å: {difficulty.toFixed(1)}x<br/>
            –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –æ—Ö–æ—Ç—É?
          </Text>
          <Button size="l" onClick={startGame} stretched style={{ marginBottom: '8px' }}>
            üéØ –ù–∞—á–∞—Ç—å –æ—Ö–æ—Ç—É
          </Button>
          <Button size="l" mode="secondary" onClick={onCancel} stretched>
            ‚ùå –û—Ç–º–µ–Ω–∞
          </Button>
        </Div>
      )}

      {gameState === 'tracking' && (
        <Div>
          <Text weight="2" style={{ marginBottom: '12px' }}>
            –§–∞–∑–∞ 1: –í—ã—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ ({(timeLeft / 1000).toFixed(1)}—Å)
          </Text>
          <Text style={{ marginBottom: '16px', fontSize: '14px', color: 'var(--text_secondary)' }}>
            –°–ª–µ–¥—É–π—Ç–µ –∑–∞ —Å–ª–µ–¥–∞–º–∏! –ù–∞–∂–∏–º–∞–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
          </Text>

          <Progress value={trackingProgress} style={{ marginBottom: '16px' }} />

          {currentDirection && (
            <Div style={{ textAlign: 'center', marginBottom: '16px', fontSize: '48px' }}>
              {currentDirection === 'up' && '‚¨ÜÔ∏è'}
              {currentDirection === 'down' && '‚¨áÔ∏è'}
              {currentDirection === 'left' && '‚¨ÖÔ∏è'}
              {currentDirection === 'right' && '‚û°Ô∏è'}
            </Div>
          )}

          <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr', gap: '8px' }}>
            <div></div>
            <Button size="l" onClick={() => handleDirectionClick('up')}>‚¨ÜÔ∏è</Button>
            <div></div>
            <Button size="l" onClick={() => handleDirectionClick('left')}>‚¨ÖÔ∏è</Button>
            <div></div>
            <Button size="l" onClick={() => handleDirectionClick('right')}>‚û°Ô∏è</Button>
            <div></div>
            <Button size="l" onClick={() => handleDirectionClick('down')}>‚¨áÔ∏è</Button>
            <div></div>
          </div>
        </Div>
      )}

      {gameState === 'aiming' && (
        <Div>
          <Text weight="2" style={{ marginBottom: '12px' }}>
            –§–∞–∑–∞ 2: –ü—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏–µ ({(timeLeft / 1000).toFixed(1)}—Å)
          </Text>
          <Text style={{ marginBottom: '16px', fontSize: '14px', color: 'var(--text_secondary)' }}>
            –ù–∞–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—Ü–µ–ª –Ω–∞ —Ü–µ–ª—å –∏ —Å—Ç—Ä–µ–ª—è–π—Ç–µ!
          </Text>

          <div style={{
            position: 'relative',
            width: '100%',
            height: '300px',
            background: 'linear-gradient(to bottom, #87CEEB 0%, #228B22 100%)',
            borderRadius: '8px',
            marginBottom: '16px',
            overflow: 'hidden'
          }}>
            {/* –¶–µ–ª—å (–∑–≤–µ—Ä—å) */}
            <div style={{
              position: 'absolute',
              left: `${targetPosition.x}%`,
              top: `${targetPosition.y}%`,
              transform: 'translate(-50%, -50%)',
              fontSize: '32px',
              filter: 'drop-shadow(0 2px 4px rgba(0,0,0,0.3))'
            }}>
              ü¶å
            </div>

            {/* –ü—Ä–∏—Ü–µ–ª */}
            <div style={{
              position: 'absolute',
              left: `${crosshairPosition.x}%`,
              top: `${crosshairPosition.y}%`,
              transform: 'translate(-50%, -50%)',
              fontSize: '40px',
              filter: 'drop-shadow(0 2px 4px rgba(0,0,0,0.5))'
            }}>
              ‚äï
            </div>
          </div>

          <Progress value={accuracy} style={{ marginBottom: '16px' }} />
          <Text style={{ marginBottom: '16px', textAlign: 'center' }}>
            –¢–æ—á–Ω–æ—Å—Ç—å: {Math.round(accuracy)}%
          </Text>

          <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr', gap: '8px', marginBottom: '16px' }}>
            <div></div>
            <Button size="l" onClick={() => moveCrosshair('up')}>‚¨ÜÔ∏è</Button>
            <div></div>
            <Button size="l" onClick={() => moveCrosshair('left')}>‚¨ÖÔ∏è</Button>
            <div></div>
            <Button size="l" onClick={() => moveCrosshair('right')}>‚û°Ô∏è</Button>
            <div></div>
            <Button size="l" onClick={() => moveCrosshair('down')}>‚¨áÔ∏è</Button>
            <div></div>
          </div>

          <Button size="l" mode="primary" onClick={shoot} stretched>
            üéØ –í–´–°–¢–†–ï–õ!
          </Button>
        </Div>
      )}

      {gameState === 'completed' && (
        <Div>
          <Text>–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</Text>
        </Div>
      )}
    </Card>
  );
};

export default TerrestrialHuntingMinigame;
