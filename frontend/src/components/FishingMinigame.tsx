import React, { useState, useEffect, useCallback } from 'react';
import { Button, Progress, Card, Title, Text, Div } from '@vkontakte/vkui';

interface FishingMinigameProps {
  fishRarity: string;
  onComplete: (success: boolean) => void;
  onCancel: () => void;
}

const FishingMinigame: React.FC<FishingMinigameProps> = ({ fishRarity, onComplete, onCancel }) => {
  const [gameState, setGameState] = useState<'waiting' | 'active' | 'completed'>('waiting');
  const [progress, setProgress] = useState(0);
  const [targetZone, setTargetZone] = useState({ start: 40, end: 60 });
  const [indicatorPosition, setIndicatorPosition] = useState(0);
  const [zoneDirection, setZoneDirection] = useState(1);
  const [timeLeft, setTimeLeft] = useState(5000);
  const [difficulty, setDifficulty] = useState(1);
  const [isHolding, setIsHolding] = useState(false);

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–¥–∫–æ—Å—Ç–∏ —Ä—ã–±—ã
  useEffect(() => {
    const difficultyMap: { [key: string]: number } = {
      '–û–±—ã—á–Ω–∞—è': 1,
      '–ù–µ–æ–±—ã—á–Ω–∞—è': 1.5,
      '–†–µ–¥–∫–∞—è': 2,
      '–û—á–µ–Ω—å —Ä–µ–¥–∫–∞—è': 2.5,
      '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è': 3
    };
    
    const newDifficulty = difficultyMap[fishRarity] || 1;
    setDifficulty(newDifficulty);
    
    // –£–º–µ–Ω—å—à–∞–µ–º –∑–æ–Ω—É –ø–æ–ø–∞–¥–∞–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ —Ä–µ–¥–∫–∏—Ö —Ä—ã–±
    const zoneSize = Math.max(10, 20 - (newDifficulty - 1) * 5);
    const zoneStart = Math.random() * (100 - zoneSize);
    setTargetZone({ start: zoneStart, end: zoneStart + zoneSize });
    
    // –£–º–µ–Ω—å—à–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –±–æ–ª–µ–µ —Ä–µ–¥–∫–∏—Ö —Ä—ã–±
    setTimeLeft(Math.max(3000, 6000 - (newDifficulty - 1) * 500));
  }, [fishRarity]);

  // –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª - –¥–≤–∏–∂–µ–Ω–∏–µ –∑–æ–Ω—ã –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
  useEffect(() => {
    if (gameState !== 'active') return;

    const interval = setInterval(() => {
      // –î–≤–∏–∂–µ–Ω–∏–µ –∑–µ–ª–µ–Ω–æ–π –∑–æ–Ω—ã —Ç—É–¥–∞-—Å—é–¥–∞
      setTargetZone(prev => {
        const zoneSize = prev.end - prev.start;
        const speed = 0.8 + difficulty * 0.3;
        let newStart = prev.start + zoneDirection * speed;
        
        // –û—Ç—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç –∫—Ä–∞–µ–≤
        if (newStart <= 0 || newStart + zoneSize >= 100) {
          setZoneDirection(d => -d);
          newStart = Math.max(0, Math.min(100 - zoneSize, newStart));
        }
        
        return { start: newStart, end: newStart + zoneSize };
      });

      // –î–≤–∏–∂–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–∏ —É–¥–µ—Ä–∂–∞–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏
      if (isHolding) {
        setIndicatorPosition(prev => Math.min(100, prev + 1.5));
      } else {
        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–∞–¥–∞–µ—Ç, –µ—Å–ª–∏ –Ω–µ —É–¥–µ—Ä–∂–∏–≤–∞–µ–º
        setIndicatorPosition(prev => Math.max(0, prev - 0.8));
      }

      setTimeLeft(prev => {
        const newTime = prev - 50;
        if (newTime <= 0) {
          setGameState('completed');
          onComplete(false);
          return 0;
        }
        return newTime;
      });
    }, 50);

    return () => clearInterval(interval);
  }, [gameState, isHolding, zoneDirection, difficulty, onComplete]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –≤ –∑–æ–Ω–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  useEffect(() => {
    if (gameState !== 'active') return;

    const checkInterval = setInterval(() => {
      const inTargetZone = indicatorPosition >= targetZone.start && indicatorPosition <= targetZone.end;
      
      if (inTargetZone) {
        setProgress(prev => {
          const newProgress = prev + (2 / difficulty);
          if (newProgress >= 100) {
            setGameState('completed');
            onComplete(true);
            return 100;
          }
          return newProgress;
        });
      } else {
        setProgress(prev => Math.max(0, prev - 1));
      }
    }, 50);

    return () => clearInterval(checkInterval);
  }, [gameState, indicatorPosition, targetZone, difficulty, onComplete]);

  const startGame = () => {
    setGameState('active');
    setProgress(0);
    setIndicatorPosition(0);
    setZoneDirection(1);
  };

  if (gameState === 'waiting') {
    return (
      <Card>
        <Div>
          <Title level="2">üé£ –†—ã–±–∞–ª–∫–∞</Title>
          <Text>–†–µ–¥–∫–æ—Å—Ç—å —Ä—ã–±—ã: {fishRarity}</Text>
          <Text>–£–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—Å—Ç–∞–≤–∞–ª—Å—è –≤ –∑–µ–ª–µ–Ω–æ–π –∑–æ–Ω–µ!</Text>
          <br />
          <Button size="l" onClick={startGame} stretched>
            –ù–∞—á–∞—Ç—å –ª–æ–≤–ª—é
          </Button>
          <Button size="m" mode="secondary" onClick={onCancel} stretched style={{ marginTop: 8 }}>
            –û—Ç–º–µ–Ω–∏—Ç—å
          </Button>
        </Div>
      </Card>
    );
  }

  return (
    <Card>
      <Div>
        <Title level="2">üé£ –õ–æ–≤–ª—è —Ä—ã–±—ã</Title>
        
        {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –ª–æ–≤–ª–∏ */}
        <Text>–ü—Ä–æ–≥—Ä–µ—Å—Å –ª–æ–≤–ª–∏:</Text>
        <Progress value={progress} />
        
        {/* –í—Ä–µ–º—è */}
        <Text>–í—Ä–µ–º—è: {Math.ceil(timeLeft / 1000)}—Å</Text>
        
        {/* –ò–≥—Ä–æ–≤–∞—è –∑–æ–Ω–∞ */}
        <div style={{ 
          position: 'relative', 
          height: '60px', 
          background: '#f0f0f0', 
          margin: '16px 0',
          borderRadius: '8px',
          overflow: 'hidden'
        }}>
          {/* –¶–µ–ª–µ–≤–∞—è –∑–æ–Ω–∞ */}
          <div style={{
            position: 'absolute',
            left: `${targetZone.start}%`,
            width: `${targetZone.end - targetZone.start}%`,
            height: '100%',
            background: '#4BB34B',
            opacity: 0.7
          }} />
          
          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä */}
          <div style={{
            position: 'absolute',
            left: `${indicatorPosition}%`,
            top: '50%',
            transform: 'translate(-50%, -50%)',
            width: '4px',
            height: '40px',
            background: '#FF3347',
            borderRadius: '2px',
            boxShadow: '0 0 8px rgba(255, 51, 71, 0.6)'
          }} />
        </div>
        
        <Button 
          size="l" 
          onMouseDown={() => setIsHolding(true)}
          onMouseUp={() => setIsHolding(false)}
          onMouseLeave={() => setIsHolding(false)}
          onTouchStart={() => setIsHolding(true)}
          onTouchEnd={() => setIsHolding(false)}
          stretched
          mode={isHolding ? 'primary' : 'secondary'}
        >
          {isHolding ? 'üé£ –£–¥–µ—Ä–∂–∏–≤–∞—é!' : 'üé£ –£–¥–µ—Ä–∂–∏–≤–∞—Ç—å'}
        </Button>
        
        <Button size="m" mode="secondary" onClick={onCancel} stretched style={{ marginTop: 8 }}>
          –°–¥–∞—Ç—å—Å—è
        </Button>
      </Div>
    </Card>
  );
};

export default FishingMinigame;
