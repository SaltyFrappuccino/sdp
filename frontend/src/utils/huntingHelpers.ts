// Helper —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º –æ—Ö–æ—Ç—ã –∏ —Ä—ã–±–∞–ª–∫–∏

export const RANK_ORDER = ['F', 'E', 'D', 'C', 'B', 'A', 'S', 'SS', 'SSS'];

export const RANK_COLORS: Record<string, string> = {
  F: '#9E9E9E',
  E: '#795548',
  D: '#4CAF50',
  C: '#2196F3',
  B: '#9C27B0',
  A: '#FF9800',
  S: '#F44336',
  SS: '#E91E63',
  SSS: '#FFD700'
};

export const MUTATION_CLASS_COLORS: Record<string, string> = {
  '–ó–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ': '#4CAF50',
  '–ò—Å–∫–∞–∂—ë–Ω–Ω—ã–µ': '#FF9800',
  '–ë–µ—Å—Ç–∏–∏': '#F44336'
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ª–æ–∫–∞—Ü–∏–∏ –ø–æ —Ä–∞–Ω–≥—É
 */
export function canAccessLocation(characterRank: string, locationRank: string): boolean {
  const characterIndex = RANK_ORDER.indexOf(characterRank);
  const locationIndex = RANK_ORDER.indexOf(locationRank);
  return characterIndex >= locationIndex;
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∞—Å—Å—ã –º—É—Ç–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–Ω–≥–∞ –∏ –≠—Ö–æ-–ó–æ–Ω—ã
 */
export function getAvailableMutationClasses(
  characterRank: string,
  echoZoneIntensity: number = 0
): Array<'–ó–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ' | '–ò—Å–∫–∞–∂—ë–Ω–Ω—ã–µ' | '–ë–µ—Å—Ç–∏–∏'> {
  const classes: Array<'–ó–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ' | '–ò—Å–∫–∞–∂—ë–Ω–Ω—ã–µ' | '–ë–µ—Å—Ç–∏–∏'> = ['–ó–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ'];
  
  const rankIndex = RANK_ORDER.indexOf(characterRank);
  
  // –ò—Å–∫–∞–∂—ë–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Å D —Ä–∞–Ω–≥–∞ –∏–ª–∏ –≤ –≠—Ö–æ-–ó–æ–Ω–µ intensity >= 2
  if (rankIndex >= 2 || echoZoneIntensity >= 2) {
    classes.push('–ò—Å–∫–∞–∂—ë–Ω–Ω—ã–µ');
  }
  
  // –ë–µ—Å—Ç–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ —Å B —Ä–∞–Ω–≥–∞ –≤ —Å–∏–ª—å–Ω—ã—Ö –≠—Ö–æ-–ó–æ–Ω–∞—Ö
  if (rankIndex >= 4 && echoZoneIntensity >= 4) {
    classes.push('–ë–µ—Å—Ç–∏–∏');
  }
  
  return classes;
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–æ–Ω—É—Å —Å–∏–Ω–µ—Ä–≥–∏–π –º–µ–∂–¥—É –ö–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏ –∏ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ–º
 */
export function calculateSynergyBonus(
  characterContracts: Array<{ contract_name: string }>,
  gearItem: { synergy_contracts?: string }
): { hasSync: boolean; bonusPercent: number } {
  if (!gearItem.synergy_contracts) {
    return { hasSync: false, bonusPercent: 0 };
  }
  
  try {
    const requiredContracts: string[] = JSON.parse(gearItem.synergy_contracts);
    
    const matchingContracts = requiredContracts.filter(req =>
      characterContracts.some(c => c.contract_name === req)
    );
    
    if (matchingContracts.length === requiredContracts.length) {
      // –ü–æ–ª–Ω–∞—è —Å–∏–Ω–µ—Ä–≥–∏—è = 20% –±–æ–Ω—É—Å
      return { hasSync: true, bonusPercent: 20 };
    } else if (matchingContracts.length > 0) {
      // –ß–∞—Å—Ç–∏—á–Ω–∞—è —Å–∏–Ω–µ—Ä–≥–∏—è = 10% –±–æ–Ω—É—Å
      return { hasSync: true, bonusPercent: 10 };
    }
  } catch (error) {
    console.error('Error parsing synergy contracts:', error);
  }
  
  return { hasSync: false, bonusPercent: 0 };
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export function formatCurrency(value: number): string {
  if (value >= 1000000000) {
    return `${(value / 1000000000).toFixed(1)}–ú–ª—Ä–¥‚Ç≠`;
  } else if (value >= 1000000) {
    return `${(value / 1000000).toFixed(1)}–ú‚Ç≠`;
  } else if (value >= 1000) {
    return `${(value / 1000).toFixed(0)}–∫‚Ç≠`;
  } else {
    return `${value}‚Ç≠`;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–∏–ø–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
 */
export function getMaterialIcon(materialType: string): string {
  const icons: Record<string, string> = {
    organic: 'ü•©',
    essence: '‚ú®',
    crystal: 'üíé',
    metal: '‚öôÔ∏è',
    special: '‚≠ê'
  };
  return icons[materialType] || 'üì¶';
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
 */
export function getQualityText(qualityModifier: number): string {
  if (qualityModifier >= 1.5) return 'üèÜ –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ–µ';
  if (qualityModifier >= 1.2) return '‚ú® –û—Ç–ª–∏—á–Ω–æ–µ';
  if (qualityModifier >= 1.0) return '‚úì –•–æ—Ä–æ—à–µ–µ';
  if (qualityModifier >= 0.8) return '- –°—Ä–µ–¥–Ω–µ–µ';
  return '‚Üì –ù–∏–∑–∫–æ–µ';
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏
 */
export function getRecommendedGear(
  location: { min_rank: string; water_type?: string },
  characterRank: string,
  characterContracts: Array<{ contract_name: string }>
): { message: string; priority: 'high' | 'medium' | 'low' } {
  const rankDifference = RANK_ORDER.indexOf(location.min_rank) - RANK_ORDER.indexOf(characterRank);
  
  if (rankDifference > 2) {
    return {
      message: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ –∏ —Å–∏–Ω–µ—Ä–≥–∏–∏ —Å –ö–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏',
      priority: 'high'
    };
  } else if (rankDifference > 0) {
    return {
      message: '–ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ',
      priority: 'medium'
    };
  } else {
    return {
      message: '–ë–∞–∑–æ–≤–æ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ –ø–æ–¥–æ–π–¥—ë—Ç',
      priority: 'low'
    };
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–≤—ë–∑–¥—ã –¥–ª—è —Ä–µ–¥–∫–æ—Å—Ç–∏
 */
export function getRarityStars(tier: number): string {
  return '‚≠ê'.repeat(Math.min(tier, 5));
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≠—Ö–æ-–ó–æ–Ω—ã
 */
export function isEchoZoneActive(echoZone: { active_until?: string } | null): boolean {
  if (!echoZone || !echoZone.active_until) {
    return false;
  }
  
  const now = new Date();
  const activeUntil = new Date(echoZone.active_until);
  return now < activeUntil;
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
 */
export function getTimeUntilEventEnd(eventEndTime: string): string {
  const now = new Date();
  const end = new Date(eventEndTime);
  const diff = end.getTime() - now.getTime();
  
  if (diff <= 0) return '–°–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ';
  
  const hours = Math.floor(diff / (1000 * 60 * 60));
  const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
  
  if (hours > 24) {
    const days = Math.floor(hours / 24);
    return `${days}–¥ ${hours % 24}—á`;
  } else if (hours > 0) {
    return `${hours}—á ${minutes}–º`;
  } else {
    return `${minutes}–º`;
  }
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –º–∏–Ω–∏-–∏–≥—Ä—ã –≤ –∫–∞—á–µ—Å—Ç–≤–æ –¥–æ–±—ã—á–∏
 */
export function calculateHarvestQuality(
  minigameScore: number,
  perfectHits: number = 0,
  difficulty: number = 1.0
): { quality: number; grade: string } {
  let quality = minigameScore; // 0-100
  
  // –ë–æ–Ω—É—Å –∑–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å
  quality += (difficulty - 1.0) * 10;
  
  // –ë–æ–Ω—É—Å –∑–∞ –ø–µ—Ä—Ñ–µ–∫—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
  quality += perfectHits * 5;
  
  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
  quality = Math.min(100, Math.max(0, quality));
  
  let grade = 'F';
  if (quality >= 95) grade = 'S';
  else if (quality >= 85) grade = 'A';
  else if (quality >= 75) grade = 'B';
  else if (quality >= 65) grade = 'C';
  else if (quality >= 50) grade = 'D';
  else if (quality >= 35) grade = 'E';
  
  return { quality, grade };
}

export default {
  canAccessLocation,
  getAvailableMutationClasses,
  calculateSynergyBonus,
  formatCurrency,
  getMaterialIcon,
  getQualityText,
  getRecommendedGear,
  getRarityStars,
  isEchoZoneActive,
  getTimeUntilEventEnd,
  calculateHarvestQuality,
  RANK_ORDER,
  RANK_COLORS,
  MUTATION_CLASS_COLORS
};

