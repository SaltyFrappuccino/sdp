import React, { useState } from 'react';
import styles from './QuickLinks.module.css';

interface QuickLink {
  id: string;
  title: string;
  bookType: 'lore' | 'character' | 'combat';
  chapterId: string;
  headingId?: string;
  description: string;
  icon: string;
}

interface QuickLinksProps {
  currentBookType: 'lore' | 'character' | 'combat';
  currentChapterId: string;
  onLinkClick: (bookType: 'lore' | 'character' | 'combat', chapterId: string, headingId?: string) => void;
}

const quickLinks: QuickLink[] = [
  // –û—Å–Ω–æ–≤—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  {
    id: 'character-basics',
    title: '–û—Å–Ω–æ–≤—ã –ü–µ—Ä—Å–æ–Ω–∞–∂–∞',
    bookType: 'character',
    chapterId: 'character-basics',
    description: '–°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞',
    icon: 'üë§'
  },
  {
    id: 'ranks-system',
    title: '–°–∏—Å—Ç–µ–º–∞ –†–∞–Ω–≥–æ–≤',
    bookType: 'character',
    chapterId: 'ranks-system',
    description: '–†–∞–Ω–≥–∏ –°—É—â–µ—Å—Ç–≤ –∏ –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏',
    icon: '‚≠ê'
  },
  {
    id: 'attributes',
    title: '–ê—Ç—Ä–∏–±—É—Ç—ã',
    bookType: 'character',
    chapterId: 'attributes',
    description: '–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞',
    icon: 'üìä'
  },
  {
    id: 'archetypes',
    title: '–ê—Ä—Ö–µ—Ç–∏–ø—ã',
    bookType: 'character',
    chapterId: 'archetypes',
    description: '–¢–∏–ø—ã –°—É—â–µ—Å—Ç–≤ –∏ –∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏',
    icon: 'üé≠'
  },
  
  // –ë–æ–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞
  {
    id: 'combat-basics',
    title: '–û—Å–Ω–æ–≤—ã –ë–æ—è',
    bookType: 'combat',
    chapterId: 'combat-basics',
    description: '–ë–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –±–æ–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã',
    icon: '‚öîÔ∏è'
  },
  {
    id: 'dominion',
    title: '–î–æ–º–∏–Ω–∏–æ–Ω',
    bookType: 'combat',
    chapterId: 'dominion',
    description: '–°–æ–∑–¥–∞–Ω–∏–µ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –î–æ–º–∏–Ω–∏–æ–Ω–∞',
    icon: 'üè∞'
  },
  {
    id: 'manifestation',
    title: '–ú–∞–Ω–∏—Ñ–µ—Å—Ç–∞—Ü–∏—è',
    bookType: 'combat',
    chapterId: 'manifestation',
    description: '–°–ø–æ—Å–æ–±—ã –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π',
    icon: '‚ú®'
  },
  {
    id: 'tags-system',
    title: '–°–∏—Å—Ç–µ–º–∞ –¢–µ–≥–æ–≤',
    bookType: 'combat',
    chapterId: 'tags-system',
    description: '–¢–µ–≥–∏ –∏ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç—å',
    icon: 'üè∑Ô∏è'
  },
  
  // –õ–æ—Ä –∏ –º–∏—Ä
  {
    id: 'world-history',
    title: '–ò—Å—Ç–æ—Ä–∏—è –ú–∏—Ä–∞',
    bookType: 'lore',
    chapterId: 'world-history',
    description: '–ò—Å—Ç–æ—Ä–∏—è –º–∏—Ä–∞ –∏ –†–∞–∑–ª–æ–º',
    icon: 'üåç'
  },
  {
    id: 'factions',
    title: '–§—Ä–∞–∫—Ü–∏–∏',
    bookType: 'lore',
    chapterId: 'factions',
    description: '–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—Ä–∞–∫—Ü–∏–∏ –º–∏—Ä–∞',
    icon: 'üèõÔ∏è'
  },
  {
    id: 'creatures',
    title: '–°—É—â–µ—Å—Ç–≤–∞',
    bookType: 'lore',
    chapterId: 'creatures',
    description: '–¢–∏–ø—ã –°—É—â–µ—Å—Ç–≤ –∏ –∏—Ö —Ä–∞–Ω–≥–∏',
    icon: 'üëπ'
  },
  {
    id: 'conductors',
    title: '–ü—Ä–æ–≤–æ–¥–Ω–∏–∫–∏',
    bookType: 'lore',
    chapterId: 'conductors',
    description: '–ü—Ä–æ–≤–æ–¥–Ω–∏–∫–∏ –∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã',
    icon: 'ü§ù'
  }
];

const QuickLinks: React.FC<QuickLinksProps> = ({ 
  currentBookType, 
  currentChapterId, 
  onLinkClick 
}) => {
  const [isExpanded, setIsExpanded] = useState(false);

  // –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Å—ã–ª–∫–∏, –∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â—É—é –≥–ª–∞–≤—É
  const filteredLinks = quickLinks.filter(link => 
    !(link.bookType === currentBookType && link.chapterId === currentChapterId)
  );

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–Ω–∏–≥–∞–º
  const groupedLinks = filteredLinks.reduce((acc, link) => {
    if (!acc[link.bookType]) {
      acc[link.bookType] = [];
    }
    acc[link.bookType].push(link);
    return acc;
  }, {} as Record<string, QuickLink[]>);

  const bookNames = {
    lore: '–õ–æ—Ä –∏ –ú–∏—Ä',
    character: '–û—Å–Ω–æ–≤—ã –ü–µ—Ä—Å–æ–Ω–∞–∂–∞',
    combat: '–ë–æ–µ–≤–∞—è –°–∏—Å—Ç–µ–º–∞'
  };

  const bookIcons = {
    lore: 'üåç',
    character: 'üë§',
    combat: '‚öîÔ∏è'
  };

  return (
    <div className={styles.container}>
      <button
        className={styles.toggleButton}
        onClick={() => setIsExpanded(!isExpanded)}
        aria-expanded={isExpanded}
        aria-label={isExpanded ? '–°–∫—Ä—ã—Ç—å –±—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏' : '–ü–æ–∫–∞–∑–∞—Ç—å –±—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏'}
      >
        <span className={styles.icon}>üîó</span>
        <span className={styles.text}>–ë—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏</span>
        <span className={`${styles.arrow} ${isExpanded ? styles.expanded : ''}`}>
          ‚ñº
        </span>
      </button>

      {isExpanded && (
        <div className={styles.linksContainer}>
          {Object.entries(groupedLinks).map(([bookType, links]) => (
            <div key={bookType} className={styles.bookGroup}>
              <div className={styles.bookHeader}>
                <span className={styles.bookIcon}>{bookIcons[bookType as keyof typeof bookIcons]}</span>
                <span className={styles.bookName}>{bookNames[bookType as keyof typeof bookNames]}</span>
              </div>
              <div className={styles.linksList}>
                {links.map(link => (
                  <button
                    key={link.id}
                    className={styles.linkButton}
                    onClick={() => onLinkClick(link.bookType, link.chapterId, link.headingId)}
                    title={link.description}
                  >
                    <span className={styles.linkIcon}>{link.icon}</span>
                    <div className={styles.linkContent}>
                      <span className={styles.linkTitle}>{link.title}</span>
                      <span className={styles.linkDescription}>{link.description}</span>
                    </div>
                  </button>
                ))}
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default QuickLinks;
