import React, { useState } from 'react';
import styles from './WorldGuide.module.css';
import AttributeList from './AttributeList';
import FactionCard from './FactionCard';
import IslandCard from './IslandCard';
import EconomyTable from './EconomyTable';
import SynkiCard from './SynkiCard';
import MechanicCard from './MechanicCard';
import SynkiPricesTable from './SynkiPricesTable';
import LivingCostsTable from './LivingCostsTable';
import LoreSection from './LoreSection';
import VolumeStructure from './VolumeStructure';
import BookmarksPanel from './BookmarksPanel';
import Pagination from './Pagination';
import BookmarkButton from './BookmarkButton';
import { attributesData } from '../data/attributesData';
import { factionsData } from '../data/factionsData';
import { islandsData } from '../data/islandsData';
import { economyData, synkiPricesData, livingCostsData } from '../data/economyData';
import { synkiData } from '../data/synkiData';
import { mechanicsData } from '../data/mechanicsData';
import { loreData } from '../data/loreData';
import { volumesData } from '../data/volumesData';

const WorldGuide: React.FC = () => {
  const [activeSection, setActiveSection] = useState('attributes');
  const [showBookmarks, setShowBookmarks] = useState(false);

  const sections = [
    { id: 'volumes', title: '–¢–æ–º—ã', icon: 'üìö' },
    { id: 'lore', title: '–õ–æ—Ä', icon: 'üìñ' },
    { id: 'attributes', title: '–ê—Ç—Ä–∏–±—É—Ç—ã', icon: 'üí™' },
    { id: 'factions', title: '–§—Ä–∞–∫—Ü–∏–∏', icon: 'üèõÔ∏è' },
    { id: 'islands', title: '–û—Å—Ç—Ä–æ–≤–∞', icon: 'üèùÔ∏è' },
    { id: 'economy', title: '–≠–∫–æ–Ω–æ–º–∏–∫–∞', icon: 'üí∞' },
    { id: 'synki', title: '–°–∏–Ω–∫–∏', icon: 'üíé' },
    { id: 'mechanics', title: '–ú–µ—Ö–∞–Ω–∏–∫–∏', icon: '‚öôÔ∏è' }
  ];

  const currentIndex = sections.findIndex(section => section.id === activeSection);

  const handlePrevious = () => {
    if (currentIndex > 0) {
      setActiveSection(sections[currentIndex - 1].id);
    }
  };

  const handleNext = () => {
    if (currentIndex < sections.length - 1) {
      setActiveSection(sections[currentIndex + 1].id);
    }
  };

  const handleBookmarkClick = (section: string) => {
    setActiveSection(section);
  };

  const renderContent = () => {
    switch (activeSection) {
      case 'volumes':
        return (
          <div className={styles.section}>
            <h2 className={styles.sectionTitle}>
              –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ
              <BookmarkButton section="volumes" title="–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ" />
            </h2>
            <p className={styles.sectionDescription}>
              –ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –º–∏—Ä—É, –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –≤ —Ç–æ–º–∞, –≥–ª–∞–≤—ã –∏ —Å–µ–∫—Ü–∏–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è.
            </p>
            <VolumeStructure volumes={volumesData} />
          </div>
        );

      case 'lore':
        return (
          <div className={styles.section}>
            <h2 className={styles.sectionTitle}>
              –õ–æ—Ä –∏ –ò—Å—Ç–æ—Ä–∏—è –ú–∏—Ä–∞
              <BookmarkButton section="lore" title="–õ–æ—Ä –∏ –ò—Å—Ç–æ—Ä–∏—è –ú–∏—Ä–∞" />
            </h2>
            <p className={styles.sectionDescription}>
              –ò—Å—Ç–æ—Ä–∏—è –º–∏—Ä–∞, –∫–∞–∫–∏–º –º—ã –µ–≥–æ –∑–Ω–∞–µ–º, –Ω–∞—á–∞–ª–∞—Å—å –≤ 1800 –≥–æ–¥—É —Å —Å–æ–±—ã—Ç–∏—è, 
              –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–≤—Å–µ–≥–¥–∞ –∏–∑–º–µ–Ω–∏–ª–æ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å –∏ –ø–æ—Ä–æ–¥–∏–ª–æ –Ω–æ–≤—ã–π –º–∏—Ä–æ–ø–æ—Ä—è–¥–æ–∫.
            </p>
            <div className={styles.loreGrid}>
              {loreData.map((section, index) => (
                <LoreSection key={index} section={section} />
              ))}
            </div>
          </div>
        );

      case 'attributes':
        return (
          <div className={styles.section}>
            <h2 className={styles.sectionTitle}>
              –ê—Ç—Ä–∏–±—É—Ç—ã –ü—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–≤
              <BookmarkButton section="attributes" title="–ê—Ç—Ä–∏–±—É—Ç—ã –ü—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–≤" />
            </h2>
            <p className={styles.sectionDescription}>
              –ê—Ç—Ä–∏–±—É—Ç—ã ‚Äî —ç—Ç–æ –æ—Å–Ω–æ–≤–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω–∞–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è —Å–≤–µ—Ä—Ö—ä–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏. 
              –û–Ω–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç, –∫–∞–∫ –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ –¥–µ–π—Å—Ç–≤—É–µ—Ç –≤ —Ç–µ –º–æ–º–µ–Ω—Ç—ã, –∫–æ–≥–¥–∞ –ê—É—Ä–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.
            </p>
            <AttributeList attributes={attributesData} />
          </div>
        );

      case 'factions':
        return (
          <div className={styles.section}>
            <h2 className={styles.sectionTitle}>
              –§—Ä–∞–∫—Ü–∏–∏
              <BookmarkButton section="factions" title="–§—Ä–∞–∫—Ü–∏–∏" />
            </h2>
            <p className={styles.sectionDescription}>
              –¢—Ä–∏ –º–æ–≥—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∫—Ü–∏–∏ –≤–µ–¥—É—Ç –≤–µ—á–Ω—É—é –±–æ—Ä—å–±—É –∑–∞ –≤–ª–∏—è–Ω–∏–µ –≤ –º–∏—Ä–µ. 
              –ö–∞–∂–¥–∞—è –∏–º–µ–µ—Ç —Å–≤–æ—é —Ñ–∏–ª–æ—Å–æ—Ñ–∏—é, —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π.
            </p>
            <div className={styles.factionsGrid}>
              {factionsData.map((faction, index) => (
                <FactionCard key={index} faction={faction} />
              ))}
            </div>
          </div>
        );

      case 'islands':
        return (
          <div className={styles.section}>
            <h2 className={styles.sectionTitle}>
              –û—Å—Ç—Ä–æ–≤–∞
              <BookmarkButton section="islands" title="–û—Å—Ç—Ä–æ–≤–∞" />
            </h2>
            <p className={styles.sectionDescription}>
              –®–µ—Å—Ç—å –∫—Ä—É–ø–Ω—ã—Ö –æ—Å—Ç—Ä–æ–≤–æ–≤-–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤, –∫–∞–∂–¥—ã–π —Å–æ —Å–≤–æ–µ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π, 
              —ç–∫–æ–Ω–æ–º–∏–∫–æ–π –∏ —Å—Ç–æ–ª–ø–∞–º–∏ –≤–ª–∞—Å—Ç–∏.
            </p>
            <div className={styles.islandsList}>
              {islandsData.map((island, index) => (
                <IslandCard key={index} island={island} />
              ))}
            </div>
          </div>
        );

      case 'economy':
        return (
          <div className={styles.section}>
            <h2 className={styles.sectionTitle}>
              –≠–∫–æ–Ω–æ–º–∏–∫–∞
              <BookmarkButton section="economy" title="–≠–∫–æ–Ω–æ–º–∏–∫–∞" />
            </h2>
            <p className={styles.sectionDescription}>
              –í –º–∏—Ä–µ, –ø–µ—Ä–µ–∂–∏–≤—à–µ–º –†–∞–∑–ª–æ–º, —ç–∫–æ–Ω–æ–º–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—É–¥—å–±—ã, —Ä–∞–∑–∂–∏–≥–∞–µ—Ç –≤–æ–π–Ω—ã 
              –∏ —Ä–∞–∑–¥–µ–ª—è–µ—Ç –ª—é–¥–µ–π –≥–ª—É–±–∂–µ, —á–µ–º –ª—é–±—ã–µ –æ–∫–µ–∞–Ω—ã –º–µ–∂–¥—É –æ—Å—Ç—Ä–æ–≤–∞–º–∏.
            </p>
            <EconomyTable 
              title="–ù–∞–≥—Ä–∞–¥—ã –ø–æ –†–∞–Ω–≥–∞–º"
              headers={['–†–∞–Ω–≥', '–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ö–≤–µ—Å—Ç', '–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –í—Ä–∞—Ç–∞']}
              rows={economyData}
            />
            <SynkiPricesTable 
              title="–†—ã–Ω–æ–∫ –°–∏–Ω–∫–∏: –¶–µ–Ω—ã –ø–æ –†–∞–Ω–≥–∞–º"
              data={synkiPricesData}
            />
            <LivingCostsTable 
              title="–¶–µ–Ω–∞ –ñ–∏–∑–Ω–∏ –∏ –ë—é–¥–∂–µ—Ç –ü—Ä–æ–≤–æ–¥–Ω–∏–∫–∞"
              data={livingCostsData}
            />
          </div>
        );

      case 'synki':
        return (
          <div className={styles.section}>
            <h2 className={styles.sectionTitle}>
              –°–∏–Ω–∫–∏
              <BookmarkButton section="synki" title="–°–∏–Ω–∫–∏" />
            </h2>
            <p className={styles.sectionDescription}>
              –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –∏ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –≤ —Å–µ–±–µ —Å–∏–ª—É –ê—É—Ä—ã. 
              –û—Ç –ø—Ä–æ—Å—Ç—ã—Ö –û—Å–∫–æ–ª–∫–æ–≤ –¥–æ –º–æ–≥—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –§–æ–∫—É—Å–æ–≤.
            </p>
            <div className={styles.synkiGrid}>
              {synkiData.map((synkiType, index) => (
                <SynkiCard key={index} synkiType={synkiType} />
              ))}
            </div>
          </div>
        );

      case 'mechanics':
        return (
          <div className={styles.section}>
            <h2 className={styles.sectionTitle}>
              –ò–≥—Ä–æ–≤—ã–µ –ú–µ—Ö–∞–Ω–∏–∫–∏
              <BookmarkButton section="mechanics" title="–ò–≥—Ä–æ–≤—ã–µ –ú–µ—Ö–∞–Ω–∏–∫–∏" />
            </h2>
            <p className={styles.sectionDescription}>
              –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª–∞—é—Ç –º–∏—Ä –∂–∏–≤—ã–º –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –¥–ª—è –∏–≥—Ä—ã.
            </p>
            <div className={styles.mechanicsGrid}>
              {mechanicsData.map((mechanic, index) => (
                <MechanicCard key={index} mechanic={mechanic} />
              ))}
            </div>
          </div>
        );

      default:
        return <div>–†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω</div>;
    }
  };

  return (
    <div className={styles.worldGuide}>
      <BookmarksPanel 
        isVisible={showBookmarks}
        onClose={() => setShowBookmarks(false)}
        onBookmarkClick={handleBookmarkClick}
      />
      
      <div className={styles.sidebar}>
        <h1 className={styles.title}>–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –ú–∏—Ä—É</h1>
        <button 
          className={styles.bookmarksButton}
          onClick={() => setShowBookmarks(true)}
          title="–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–ª–∞–¥–∫–∏"
        >
          üîñ –ó–∞–∫–ª–∞–¥–∫–∏
        </button>
        <nav className={styles.navigation}>
          {sections.map((section) => (
            <button
              key={section.id}
              className={`${styles.navButton} ${activeSection === section.id ? styles.active : ''}`}
              onClick={() => setActiveSection(section.id)}
            >
              <span className={styles.navIcon}>{section.icon}</span>
              <span className={styles.navTitle}>{section.title}</span>
            </button>
          ))}
        </nav>
      </div>
      
      <div className={styles.content}>
        <Pagination
          currentIndex={currentIndex}
          totalItems={sections.length}
          onPrevious={handlePrevious}
          onNext={handleNext}
          className={styles.topPagination}
        />
        
        {renderContent()}
        
        <Pagination
          currentIndex={currentIndex}
          totalItems={sections.length}
          onPrevious={handlePrevious}
          onNext={handleNext}
          className={styles.bottomPagination}
        />
      </div>
    </div>
  );
};

export default WorldGuide;
