import logging
import threading
from core import utils
from core import ai_handler
from database import get_or_create_user
import uuid
import os
import vk_api

def _extract_text_from_event(vk, event):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞,
    –æ–±–æ–≥–∞—â–∞—è –µ–≥–æ –∏–º–µ–Ω–∞–º–∏ –∞–≤—Ç–æ—Ä–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
    """
    user_cache = {}
    text_parts = []

    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if event.get('fwd_messages'):
        # –°–æ–±–∏—Ä–∞–µ–º ID –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
        user_ids = {msg['from_id'] for msg in event['fwd_messages'] if 'from_id' in msg and msg['from_id'] > 0}
        if user_ids:
            try:
                users_info = vk.users.get(user_ids=list(user_ids))
                for user in users_info:
                    user_cache[user['id']] = f"{user.get('first_name', '')} {user.get('last_name', '')}".strip()
            except vk_api.ApiError as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è IDs {user_ids}: {e}")

        # –°–æ–±–∏—Ä–∞–µ–º –¥–∏–∞–ª–æ–≥
        for fwd_msg in event['fwd_messages']:
            from_id = fwd_msg.get('from_id')
            text = fwd_msg.get('text', '').strip()
            if not text:
                continue
            
            author_name = user_cache.get(from_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {from_id}")
            text_parts.append(f"{author_name}: {text}")
            
        return "\n".join(text_parts) if text_parts else None

    # –ï—Å–ª–∏ –∏—Ö –Ω–µ—Ç, –∏—â–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if event.get('reply_message'):
        reply_msg = event['reply_message']
        from_id = reply_msg.get('from_id')
        text = reply_msg.get('text', '').strip()

        if not text:
            return None

        author_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {from_id}"
        if from_id and from_id > 0:
            try:
                user_info = vk.users.get(user_ids=from_id)[0]
                author_name = f"{user_info.get('first_name', '')} {user_info.get('last_name', '')}".strip()
            except vk_api.ApiError as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è ID {from_id}: {e}")
        
        return f"{author_name}: {text}"
        
    return None


# =========================================================================================
# === –ü–û–¢–û–ß–ù–´–ï –§–£–ù–ö–¶–ò–ò (–î–õ–Ø –ê–°–ò–ù–•–†–û–ù–ù–û–ì–û –í–´–ü–û–õ–ù–ï–ù–ò–Ø) =======================================
# =========================================================================================

def _sglypa_ai_thread_target(vk, peer_id, user_text):
    """–¶–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Ç–æ–∫–∞, –≤—ã–ø–æ–ª–Ω—è—é—â–∞—è –∑–∞–ø—Ä–æ—Å –∫ –°–≥–ª—ã–ø–µ-AI."""
    response = ai_handler.query_sglypa_ai(user_text)
    utils.send_message(vk, peer_id, response)

def _grok_ai_thread_target(vk, peer_id, user_text):
    """–¶–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Ç–æ–∫–∞, –≤—ã–ø–æ–ª–Ω—è—é—â–∞—è –∑–∞–ø—Ä–æ—Å –∫ Grok-AI."""
    response = ai_handler.query_grok_ai(user_text)
    utils.send_message(vk, peer_id, response)

def _does_he_know_thread_target(vk, peer_id, user_text):
    """–¶–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Ç–æ–∫–∞, –≤—ã–ø–æ–ª–Ω—è—é—â–∞—è –∑–∞–ø—Ä–æ—Å –∫ "Does he know?"-AI."""
    response = ai_handler.query_does_he_know_ai(user_text)
    utils.send_message(vk, peer_id, response)

def _image_generation_thread_target(vk, peer_id, prompt, vk_session):
    """–¶–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Ç–æ–∫–∞, –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∞—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∞—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
    image_bytes, error_message = ai_handler.generate_image_ai(prompt)

    if error_message:
        utils.send_message(vk, peer_id, error_message)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
    temp_file_path = f"temp_image_{uuid.uuid4()}.png"
    try:
        with open(temp_file_path, "wb") as f:
            f.write(image_bytes)

        upload = vk_api.VkUpload(vk_session)
        # –£–±–∏—Ä–∞–µ–º peer_id –∏–∑ –≤—ã–∑–æ–≤–∞ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞.
        # –≠—Ç–æ –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥: —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –≤ "–æ–±—â–∏–π" –∞–ª—å–±–æ–º,
        # –∞ –ø–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π ID –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Ç.
        photo = upload.photo_messages(photos=temp_file_path)[0]
        
        attachment = f"photo{photo['owner_id']}_{photo['id']}"
        utils.send_message(vk, peer_id, message="‚ú® –í–∞—à —à–µ–¥–µ–≤—Ä –≥–æ—Ç–æ–≤!", attachment=attachment)

    except vk_api.ApiError as e:
        logging.error(f"–û—à–∏–±–∫–∞ VK API –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        utils.send_message(vk, peer_id, "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ VK.")
    except Exception as e:
        logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ image_generation_command: {e}")
        utils.send_message(vk, peer_id, "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")
    finally:
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(temp_file_path):
            os.remove(temp_file_path)

# =========================================================================================
# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î (–ó–ê–ü–£–°–ö–ê–Æ–¢ –ü–û–¢–û–ö–ò) ================================================
# =========================================================================================

def sglypa_ai_command(vk, event, args):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –°–≥–ª—ã–ø—ã-–Ω–µ–π—Ä–æ–Ω–∫–∏ –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    user_text = _extract_text_from_event(vk, event)
    if not user_text:
        utils.send_message(vk, event['peer_id'], "üìù –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏–ª–∏ —Å –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏).")
        return

    utils.send_message(vk, event['peer_id'], "üß† –•—É–π –®–µ—Å—Ç–∞–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—è–∂–µ–ª—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    thread = threading.Thread(
        target=_sglypa_ai_thread_target,
        args=(vk, event['peer_id'], user_text)
    )
    thread.start()


def grok_ai_command(vk, event, args):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç Grok –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    user_text = _extract_text_from_event(vk, event)
    if not user_text:
        utils.send_message(vk, event['peer_id'], "üìù –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏–ª–∏ —Å –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏).")
        return
            
    utils.send_message(vk, event['peer_id'], "‚ö°Ô∏è Grok –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–¥–∏–≤–æ—Å—Ç—å...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—è–∂–µ–ª—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    thread = threading.Thread(
        target=_grok_ai_thread_target,
        args=(vk, event['peer_id'], user_text)
    )
    thread.start()


def does_he_know_command(vk, event, args):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –≤ —Å—Ç–∏–ª–µ "Does he know?" –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    user_text = _extract_text_from_event(vk, event)
    if not user_text:
        utils.send_message(vk, event['peer_id'], "üìù –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏–ª–∏ —Å –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏).")
        return

    utils.send_message(vk, event['peer_id'], "ü§î...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—è–∂–µ–ª—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    thread = threading.Thread(
        target=_does_he_know_thread_target,
        args=(vk, event['peer_id'], user_text)
    )
    thread.start()


def image_generation_command(vk, event, args, vk_session):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö/–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    user_id = event.get('from_id')
    user_role = get_or_create_user(user_id).get('role')
    if user_role != 'admin':
        utils.send_message(vk, event['peer_id'], "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    prompt = _extract_text_from_event(vk, event)
    if not prompt:
        utils.send_message(vk, event['peer_id'], "üìù –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –æ—Ç–≤–µ—Ç—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ. –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º, —á—Ç–æ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å.")
        return

    # –û–±—Ä–µ–∑–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –≤ —á–∞—Ç
    prompt_short = prompt[:200] + '...' if len(prompt) > 200 else prompt
    utils.send_message(vk, event['peer_id'], f"üé® –ù–µ–π—Ä–æ—Å–µ—Ç—å —Ä–∏—Å—É–µ—Ç —à–µ–¥–µ–≤—Ä –ø–æ –∑–∞–ø—Ä–æ—Å—É: \"{prompt_short}\"")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—è–∂–µ–ª—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    thread = threading.Thread(
        target=_image_generation_thread_target,
        args=(vk, event['peer_id'], prompt, vk_session)
    )
    thread.start()
