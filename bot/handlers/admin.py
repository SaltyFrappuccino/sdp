import re
import logging
from core.permissions import admin_required
from core.utils import get_random_id, send_message
from database import set_user_role, get_users_by_role, get_or_create_user
from core import cooldowns, sglypa
import vk_api.exceptions
import vk_api

def parse_user_id(text_mention: str) -> int | None:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è '[id123|Name]' –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."""
    match = re.search(r"\[id(\d+)\|.+\]", text_mention)
    if match:
        return int(match.group(1))
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ–º (ID)
    if text_mention.isdigit():
        return int(text_mention)
    return None

@admin_required
def sglypa_mode_command(vk, event, args):
    """–£–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∂–∏–º–æ–º –°–≥–ª—ã–ø—ã. –§–æ—Ä–º–∞—Ç: sdp sglypa [on|off|learn]"""
    if not args or args[0] not in ['on', 'off', 'learn']:
        send_message(vk, event.peer_id, "üìù –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `sdp sglypa [on|off|learn]`")
        return

    action = args[0]
    peer_id = event.peer_id

    if action == 'on':
        sglypa.SGLYPA_MODE_CHATS.add(peer_id)
        sglypa.save_sglypa_data()
        message = "‚úÖ –†–µ–∂–∏–º –°–≥–ª—ã–ø—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞."
    
    elif action == 'off':
        if peer_id in sglypa.SGLYPA_MODE_CHATS:
            sglypa.SGLYPA_MODE_CHATS.remove(peer_id)
            # –ü—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –æ–±—É—á–∏—Ç—å—Å—è –Ω–∞ —Ç–æ–º, —á—Ç–æ –µ—Å—Ç—å –≤ –ø–∞–º—è—Ç–∏
            peer_id_str = str(peer_id)
            messages_to_learn = sglypa.MESSAGE_MEMORY.get(peer_id_str, [])
            if messages_to_learn:
                sglypa.build_model(peer_id, messages_to_learn)
            sglypa.save_sglypa_data()
            message = "üëΩ –†–µ–∂–∏–º –°–≥–ª—ã–ø—ã –≤—ã–∫–ª—é—á–µ–Ω. –Ø –∑–∞–ø–æ–º–Ω–∏–ª –≤—Å—ë, —á—Ç–æ –≤—ã —Ç—É—Ç –Ω–∞–ø–∏—Å–∞–ª–∏. –î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á."
        else:
            message = "üëΩ –†–µ–∂–∏–º –°–≥–ª—ã–ø—ã —É–∂–µ –±—ã–ª –≤—ã–∫–ª—é—á–µ–Ω."
    else:
        message = "–ù–µ–≤–µ—Ä–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'on' –∏–ª–∏ 'off'."

    send_message(vk, peer_id, message)


@admin_required
def set_cooldown_command(vk, event, args):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫—É–ª–¥–∞—É–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥—ã. –§–æ—Ä–º–∞—Ç: sdp setcd <–∫–æ–º–∞–Ω–¥–∞> <—Å–µ–∫—É–Ω–¥—ã>"""
    if len(args) != 2:
        send_message(vk, event.peer_id, "üìù –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `sdp setcd <–∫–æ–º–∞–Ω–¥–∞> <—Å–µ–∫—É–Ω–¥—ã>`\n–ù–∞–ø—Ä–∏–º–µ—Ä: `sdp setcd gif 60`")
        return

    command, time_str = args
    try:
        seconds = int(time_str)
        if seconds < 0:
            raise ValueError
    except ValueError:
        send_message(vk, event.peer_id, "üö´ –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
        return
    
    cooldowns.COMMAND_COOLDOWNS[command] = seconds
    cooldowns.save_cooldown_settings()

    if seconds == 0:
        message = f"‚úÖ –ö—É–ª–¥–∞—É–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥—ã `{command}` –±—ã–ª —É–±—Ä–∞–Ω."
    else:
        message = f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫—É–ª–¥–∞—É–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥—ã `{command}`: {seconds} —Å–µ–∫."

    send_message(vk, event.peer_id, message)


@admin_required
def list_cooldowns_command(vk, event, args):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫—É–ª–¥–∞—É–Ω–æ–≤."""
    
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    cooldowns.load_cooldown_settings()

    if not cooldowns.COMMAND_COOLDOWNS:
        message = "‚ÑπÔ∏è –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫—É–ª–¥–∞—É–Ω–∞."
    else:
        message = "‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—É–ª–¥–∞—É–Ω–æ–≤:\n\n"
        for command, seconds in cooldowns.COMMAND_COOLDOWNS.items():
            if seconds > 0: # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∫—É–ª–¥–∞—É–Ω
                message += f"üîπ `{command}`: {seconds} —Å–µ–∫.\n"
    
    message += "\n‚ÑπÔ∏è –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∫—É–ª–¥–∞—É–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π `setcd`."

    send_message(vk, event.peer_id, message)


def set_role_command(vk, event, args, role_to_set: str, role_name: str):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–æ–ª–∏."""
    if not args:
        send_message(vk, event.peer_id, f"‚ùì –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä: sdp –¥–∞—Ç—å–∞–¥–º–∏–Ω–∫—É [id123|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å]")
        return

    target_id = parse_user_id(args[0])
    if not target_id:
        send_message(vk, event.peer_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
        
    try:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î
        get_or_create_user(target_id)
        set_user_role(target_id, role_to_set)
        send_message(vk, event.peer_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é [id{target_id}|–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] –≤—ã–¥–∞–Ω—ã –ø—Ä–∞–≤–∞ '{role_name}'.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–æ–ª–∏ –¥–ª—è {target_id}: {e}")
        send_message(vk, event.peer_id, f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏.")

def promote_to_admin(vk, event, args):
    """–ù–∞–∑–Ω–∞—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    set_role_command(vk, event, args, role_to_set='admin', role_name='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')

def demote_to_user(vk, event, args):
    """–°–Ω–∏–º–∞–µ—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    set_role_command(vk, event, args, role_to_set='user', role_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')

@admin_required
def show_admins(vk, event, args):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."""
    try:
        admin_ids = get_users_by_role('admin')
        if not admin_ids:
            message = "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç."
        else:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –æ—Ç VK API
            users_info = vk.users.get(user_ids=','.join(map(str, admin_ids)))
            
            admin_mentions = []
            for user in users_info:
                # –°–æ–∑–¥–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤–∏–¥–∞ [id123|–ò–º—è –§–∞–º–∏–ª–∏—è]
                admin_mentions.append(f"[id{user['id']}|{user['first_name']} {user['last_name']}]")
            
            message = "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n" + "\n".join(admin_mentions)
        
        send_message(vk, event.peer_id, message)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤: {e}")
        send_message(vk, event.peer_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")


@admin_required
def autism_command(vk, event, args):
    """–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –ê—É—Ç–∏–∑–º–∞ –¥–ª—è –°–≥–ª—ã–ø—ã –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ."""
    peer_id = event.peer_id
    if peer_id in sglypa.AUTISM_MODE_CHATS:
        sglypa.AUTISM_MODE_CHATS.remove(peer_id)
        message = "–†–µ–∂–∏–º –ê—É—Ç–∏–∑–º–∞ –¥–ª—è –°–≥–ª—ã–ø—ã –í–´–ö–õ–Æ–ß–ï–ù. (¬¥-œâ-`)"
    else:
        sglypa.AUTISM_MODE_CHATS.add(peer_id)
        message = "–†–µ–∂–∏–º –ê—É—Ç–∏–∑–º–∞ –¥–ª—è –°–≥–ª—ã–ø—ã –í–ö–õ–Æ–ß–ï–ù. (^œâ^)"
    
    sglypa.save_sglypa_data()
    send_message(vk, peer_id, message)
