import re
import sqlite3
import logging
from datetime import datetime, timedelta
from core.utils import get_random_id, send_message
from handlers.admin import parse_user_id
import pytz

def parse_time(time_str: str) -> timedelta | None:
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ (–Ω–∞–ø—Ä., '1–¥', '5—á', '30–º') –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç timedelta."""
    match = re.match(r'(\d+)([–¥–º—á—Å])', time_str.lower())
    if not match:
        send_message(vk, event.peer_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '1–¥', '5—á', '30–º'.")
        return None
    
    value, unit = int(match.group(1)), match.group(2)
    
    if unit == '–¥':
        return timedelta(days=value)
    elif unit == '—á':
        return timedelta(hours=value)
    elif unit == '–º':
        return timedelta(minutes=value)
    elif unit == '—Å':
        return timedelta(seconds=value)
    else:
        return None

def add_reminder(target_vk_id: int, setter_vk_id: int, message: str, due_date: datetime, peer_id: int):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO reminders (target_vk_id, setter_vk_id, message, due_date, peer_id) VALUES (?, ?, ?, ?, ?)",
        (target_vk_id, setter_vk_id, message, due_date, peer_id)
    )
    conn.commit()
    conn.close()

def remind_command(vk, event, args):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É '–Ω–∞–ø–æ–º–Ω–∏—Ç—å'."""
    # sdp –Ω–∞–ø–æ–º–Ω–∏—Ç—å [id123|@mention] —á–µ—Ä–µ–∑ 1–¥ 5—á –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å—Ç
    
    if len(args) < 4 or '—á–µ—Ä–µ–∑' not in args:
        send_message(vk, event.peer_id, "üìù –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `sdp –Ω–∞–ø–æ–º–Ω–∏—Ç—å <@–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å> —á–µ—Ä–µ–∑ <–≤—Ä–µ–º—è> <—Ç–µ–∫—Å—Ç>`")
        return

    mention = args[0]
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
        target_id = int(re.search(r"\[id(\d+)\|", mention).group(1))
    except (AttributeError, ValueError):
        send_message(vk, event.peer_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ @—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ.")
        return

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è –∏ —Ç–µ–∫—Å—Ç
    time_parts = []
    text_parts_started = False
    text_parts = []

    for part in args[2:]: # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º mention –∏ '—á–µ—Ä–µ–∑'
        if not text_parts_started and re.match(r'^\d+[–¥—á–º]$', part, re.IGNORECASE):
            time_parts.append(part)
        else:
            text_parts_started = True
            text_parts.append(part)
    
    if not time_parts:
        send_message(vk, event.peer_id, "‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –≤—Ä–µ–º—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '1–¥', '5—á', '30–º'.")
        return
        
    total_delta = timedelta()
    for part in time_parts:
        delta = parse_time(part)
        if delta:
            total_delta += delta
        else:
            send_message(vk, event.peer_id, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: '{part}'.")
            return
            
    reminder_text = " ".join(text_parts)
    if not reminder_text:
        send_message(vk, event.peer_id, "üìù –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
        return
        
    try:
        due_date, due_date_moscow_str = add_reminder(target_id, event.user_id, reminder_text, total_delta, event.peer_id)
        send_message(vk, event.peer_id, f"‚úÖ –•–æ—Ä–æ—à–æ, —è –Ω–∞–ø–æ–º–Ω—é [id{target_id}|–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é] {due_date_moscow_str}.")
    except Exception as e:
        send_message(vk, event.peer_id, f"üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
