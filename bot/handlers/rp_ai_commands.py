import logging
import asyncio
import threading
from typing import List, Dict, Any
from vk_api.vk_api import VkApiMethod, VkApi
from vk_api.bot_longpoll import VkBotMessageEvent

from core.utils import send_message
from core.permissions import is_admin
from core.ai_handler import query_rp_opinion_ai, query_rp_verdict_ai

# --- –£—Ç–∏–ª–∏—Ç—ã ---

_user_cache: Dict[int, str] = {}

def _get_user_name(vk: VkApiMethod, user_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID, –∏—Å–ø–æ–ª—å–∑—É—è –∫—ç—à."""
    if user_id in _user_cache:
        return _user_cache[user_id]
    try:
        user_info = vk.users.get(user_ids=user_id)[0]
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º first_name –∏ last_name, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω–æ–µ –∏–º—è
        full_name = f"{user_info['first_name']} {user_info['last_name']}"
        _user_cache[user_id] = full_name
        return full_name
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"

def _extract_text_from_event(vk: VkApiMethod, event: Dict[str, Any]) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ reply_message –∏–ª–∏ fwd_messages —Å –∏–º–µ–Ω–∞–º–∏ –∞–≤—Ç–æ—Ä–æ–≤."""
    texts = []
    messages_to_process: List[Dict[str, Any]] = []

    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–¥–∞–µ–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º
    if 'fwd_messages' in event and event['fwd_messages']:
        messages_to_process.extend(event['fwd_messages'])

    # –ï—Å–ª–∏ –∏—Ö –Ω–µ—Ç, —Å–º–æ—Ç—Ä–∏–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—Ç–∏–ª–∏
    if not messages_to_process and 'reply_message' in event:
        messages_to_process.append(event['reply_message'])
    
    # –ï—Å–ª–∏ –∏ —ç—Ç–æ–≥–æ –Ω–µ—Ç, –±–µ—Ä–µ–º —Ç–µ–∫—Å—Ç —Å–∞–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è —Å–ª—É—á–∞–µ–≤ sdp –∫–æ–º–∞–Ω–¥–∞ <—Ç–µ–∫—Å—Ç>)
    if not messages_to_process and event.get('text'):
        author_name = _get_user_name(vk, event['from_id'])
        texts.append(f"{author_name}: {event['text']}")

    for msg in messages_to_process:
        author_name = _get_user_name(vk, msg['from_id'])
        texts.append(f"{author_name}: {msg['text']}")
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if 'fwd_messages' in msg and msg['fwd_messages']:
             texts.append(_extract_text_from_event(vk, msg))


    return "\n\n".join(texts)

# --- –õ–æ–≥–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –ø–æ—Ç–æ–∫–µ ---

def _rp_ai_thread_target(vk: VkApiMethod, event: VkBotMessageEvent, text: str, extra_instructions: str, mode: str):
    """
    –¶–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Ç–æ–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ AI.
    """
    try:
        logging.info(f"–ó–∞–ø—É—Å–∫–∞—é RP AI ({mode}) –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è —á–∞—Ç–∞ {event.peer_id}")
        send_message(vk, event.peer_id, f"‚åõÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–æ—Å—Ç—ã –¥–ª—è —Ä–µ–∂–∏–º–∞ ¬´{mode}¬ª... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")

        if mode == '–º–Ω–µ–Ω–∏–µ':
            response = query_rp_opinion_ai(text, extra_instructions)
        elif mode == '–≤–µ—Ä–¥–∏–∫—Ç':
            response = query_rp_verdict_ai(text, extra_instructions)
        else:
            # –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è, –Ω–æ –æ–Ω–∞ –ø–æ–ª–µ–∑–Ω–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            response = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è RP AI."

        logging.info(f"RP AI ({mode}) –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç –¥–ª—è —á–∞—Ç–∞ {event.peer_id}.")
        send_message(vk, event.peer_id, response)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ RP AI ({mode}): {e}", exc_info=True)
        send_message(vk, event.peer_id, f"üí• –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–µ—Ä—å–µ–∑–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ RP AI ({mode}).")

# --- –ö–æ–º–∞–Ω–¥–∞ ---

def rp_ai_command(vk: VkApiMethod, vk_session: VkApi, event: VkBotMessageEvent, command_args: list, full_message_object):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã 'sdp rp –≤–µ—Ä–¥–∏–∫—Ç' –∏ 'sdp rp –º–Ω–µ–Ω–∏–µ'.
    """
    if not is_admin(event.peer_id, event.user_id):
        send_message(vk, event.peer_id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if not command_args or command_args[0].lower() not in ['–≤–µ—Ä–¥–∏–∫—Ç', '–º–Ω–µ–Ω–∏–µ']:
        send_message(vk, event.peer_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: sdp rp [–≤–µ—Ä–¥–∏–∫—Ç|–º–Ω–µ–Ω–∏–µ] [–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏...]\n(–∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –ø–æ—Å—Ç—ã –∏–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –∏—Ö)")
        return

    mode = command_args[0].lower()
    extra_instructions = ' '.join(command_args[1:]) if len(command_args) > 1 else "–ù–µ—Ç"

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º vk_session.get_api(), —Ç.–∫. –¥–ª—è vk.users.get –Ω—É–∂–µ–Ω –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç vk_api
    text_to_analyze = _extract_text_from_event(vk_session.get_api(), full_message_object)

    if not text_to_analyze:
        send_message(vk, event.peer_id, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –ø–æ—Å—Ç –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—è–∂–µ–ª—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    ai_thread = threading.Thread(
        target=_rp_ai_thread_target,
        args=(vk, event, text_to_analyze, extra_instructions, mode)
    )
    ai_thread.start()


def rp_judge_command(vk: VkApiMethod, vk_session: VkApi, event: VkBotMessageEvent, command_args: list, full_message_object):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É 'sdp —Å—É–¥—å—è' - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –†–ü –ø–æ—Å—Ç—ã –∏ –≤—ã–Ω–æ—Å–∏—Ç –≤–µ—Ä–¥–∏–∫—Ç.
    –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º.
    """
    if not is_admin(event.peer_id, event.user_id):
        send_message(vk, event.peer_id, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ - –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    extra_instructions = ' '.join(command_args) if command_args else "–ù–µ—Ç"

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º vk_session.get_api(), —Ç.–∫. –¥–ª—è vk.users.get –Ω—É–∂–µ–Ω –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç vk_api
    text_to_analyze = _extract_text_from_event(vk_session.get_api(), full_message_object)

    if not text_to_analyze:
        send_message(vk, event.peer_id, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –†–ü –ø–æ—Å—Ç—ã –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –∏—Ö.")
        return

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—è–∂–µ–ª—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å —Ä–µ–∂–∏–º–æ–º '–≤–µ—Ä–¥–∏–∫—Ç'
    ai_thread = threading.Thread(
        target=_rp_ai_thread_target,
        args=(vk, event, text_to_analyze, extra_instructions, '–≤–µ—Ä–¥–∏–∫—Ç')
    )
    ai_thread.start()