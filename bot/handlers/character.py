import json
import logging
from core.permissions import admin_required
from core.utils import send_message
from core.backend_api import get_characters_by_vk_id, find_character

# --- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ ---

def my_characters(vk, event, args):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    vk_id = event.user_id
    characters = get_characters_by_vk_id(vk_id)
    
    if not characters:
        send_message(vk, event.peer_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.")
        return

    char_list = "\n".join([f"- {char['name']} (ID: {char['id']})" for char in characters])
    message = f"üìú –í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏:\n{char_list}"
    send_message(vk, event.peer_id, message)

def character_info(vk, event, args):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ."""
    if not args:
        send_message(vk, event.peer_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –∏–ª–∏ ID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
        return

    query = " ".join(args)
    vk_id = event.user_id
    
    character = find_character(vk_id, query)

    if character:
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        attributes_str = "\n".join([f"  - {attr}: {value}" for attr, value in character.get('attributes', {}).items()])
        if not attributes_str:
            attributes_str = "  (–Ω–µ —É–∫–∞–∑–∞–Ω—ã)"

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è—á–µ–µ–∫ –∞—É—Ä—ã
        aura_cells = character.get('aura_cells')
        if isinstance(aura_cells, dict):
             aura_cells_str = "\n".join([f"  - {cell}: {count}" for cell, count in aura_cells.items()])
        else:
             aura_cells_str = "  (–Ω–µ —É–∫–∞–∑–∞–Ω—ã)"

        message = (
            f"üë§ –ü–µ—Ä—Å–æ–Ω–∞–∂: {character['name']} (ID: {character['id']})\n"
            f"üí∞ –ö—Ä–µ–¥–∏—Ç—ã: {character.get('credits', 'N/A')}\n"
            f"‚ú® –û—á–∫–∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤: {character.get('attribute_points_total', 'N/A')}\n\n"
            f"üìä –ê—Ç—Ä–∏–±—É—Ç—ã:\n{attributes_str}\n\n"
            f"üîÆ –Ø—á–µ–π–∫–∏ –∞—É—Ä—ã:\n{aura_cells_str}"
        )
        send_message(vk, event.peer_id, message)
    else:
        send_message(vk, event.peer_id, f"–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å –∏–º–µ–Ω–µ–º –∏–ª–∏ ID '{query}' –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –≤–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.")

# --- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ ---

# @admin_required
# def set_currency(vk, event, args):
#     """
#     (–í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û)
#     –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –≤—ã—á–∏—Ç–∞–µ—Ç –∫—Ä–µ–¥–∏—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂—É.
#     """
#     vk.messages.send(peer_id=event.peer_id, message="‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ API-–∫–ª—é—á–∞.", random_id=get_random_id())
