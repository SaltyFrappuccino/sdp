import os
import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from dotenv import load_dotenv
import logging
from types import SimpleNamespace
from apscheduler.schedulers.background import BackgroundScheduler
import sqlite3
from datetime import datetime
import pytz
import random
import re
import time

from database import get_or_create_user, init_db, set_user_role
from core.utils import get_random_id, send_message
from handlers import admin, general, dice, character, reminders, help, gifs, handbook, ai_commands, games, vote_ban
from handlers.help import help_command, admin_help_command
from handlers.gifs import get_gif
from handlers.handbook import handbook_command
from handlers.ai_commands import sglypa_ai_command, grok_ai_command, image_generation_command, does_he_know_command, gigachat_ai_command
from handlers.rp_ai_commands import rp_ai_command, rp_judge_command
import core.cooldowns as cooldowns
import core.sglypa as sglypa
from vkbottle import Bot
from vkbottle.bot import Message, BotLabeler

# --- –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è vkbottle ---
# –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π –æ–±—ä–µ–∫—Ç bot, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å labeler'—ã
bot = Bot(token="fake")
labeler = BotLabeler()

# --- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–≥—Ä ---
# –¢–∞–∫ –∫–∞–∫ –Ω–æ–≤—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ, –∏—Ö –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –≤ event loop'–µ
import asyncio

async def run_game_command(command_func, message_obj):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏–≥—Ä—ã."""
    # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π –æ–±—ä–µ–∫—Ç Message, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å vkbottle
    vkbottle_message = Message(**message_obj)
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ user'–∞, —Ç.–∫. –≤ —Å—Ç–∞—Ä–æ–º –∫–æ–¥–µ —ç—Ç–æ–≥–æ –Ω–µ—Ç –Ω–∞–ø—Ä—è–º—É—é –≤ –æ–±—ä–µ–∫—Ç–µ
    vkbottle_message.from_id = message_obj['from_id']
    
    # –î–ª—è /–∫–æ—Å—Ç–∏ <num>
    args = message_obj['text'].split()
    kwargs = {}
    if len(args) > 1 and args[1].isdigit():
        kwargs['num'] = int(args[1])

    await command_func(vkbottle_message, **kwargs)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –°–ª–æ–≤–∞—Ä—å –∫–æ–º–∞–Ω–¥
COMMANDS = {
    'start': general.start,
    '–Ω–∞—á–∞—Ç—å': general.start,
    '–ø–∏–≤–æ': general.beer_command,
    'roll': dice.roll,
    'r': dice.roll,
    '–Ω–∞–ø–æ–º–Ω–∏—Ç—å': reminders.remind_command,
    '–ø–µ—Ä—Å–æ–Ω–∞–∂–∏': character.my_characters,
    '–∏–Ω—Ñ–æ': character.character_info,
    '–ø–æ–º–æ—â—å': help_command,
    'gif': get_gif,
    '—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫': handbook_command,
    # –ò–≥—Ä–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    '–±–ª—ç–∫–¥–∂–µ–∫': games.start_blackjack,
    '–≤–∑—è—Ç—å': games.blackjack_hit,
    '—Ö–≤–∞—Ç–∏—Ç': games.blackjack_stand,
    # –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã
    '–¥–∞—Ç—å–∞–¥–º–∏–Ω–∫—É': admin.promote_to_admin,
    '—Å–Ω—è—Ç—å–∞–¥–º–∏–Ω–∫—É': admin.demote_to_user,
    '–∞–¥–º–∏–Ω—ã': admin.show_admins,
    '–ø–æ–º–æ—â—å–∞–¥–º–∏–Ω–∞–º': admin_help_command,
    'setcd': admin.set_cooldown_command,
    'cd': admin.list_cooldowns_command,
    'sglypa': admin.sglypa_mode_command,
    '–∞—É—Ç–∏–∑–º': admin.autism_command,
    # –ù–µ–π—Ä–æ-–∫–æ–º–∞–Ω–¥—ã
    '–Ω–µ–π—Ä–æ–Ω–∫–∞': sglypa_ai_command,
    '—à–µ–¥–µ–≤—Ä': image_generation_command,
    'rp': rp_ai_command,
    '–≥–∏–≥–∞—á–∞—Ç': gigachat_ai_command,
    '—Å—É–¥—å—è': rp_judge_command
}
PREFIXES = ['sdp', '&']

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –±–æ—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Å–∞–º–æ–≥–æ —Å–µ–±—è
GROUP_ID_STR = os.getenv("GROUP_ID")
BOT_ID = -int(GROUP_ID_STR) if GROUP_ID_STR and GROUP_ID_STR.isdigit() else None


# --- –ö—ç—à —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ ---
CHAT_MEMBERS_CACHE = {}
CACHE_LIFETIME_SECONDS = 600 # 10 –º–∏–Ω—É—Ç

def get_chat_members(vk, peer_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫—ç—à."""
    now = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if peer_id in CHAT_MEMBERS_CACHE:
        cache_entry = CHAT_MEMBERS_CACHE[peer_id]
        if now - cache_entry['timestamp'] < CACHE_LIFETIME_SECONDS:
            return cache_entry['members']

    # –ï—Å–ª–∏ –≤ –∫—ç—à–µ –Ω–µ—Ç –∏–ª–∏ –æ–Ω —É—Å—Ç–∞—Ä–µ–ª, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
    try:
        members_response = vk.messages.getConversationMembers(peer_id=peer_id)
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ–Ω–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ)
        user_ids = [member['member_id'] for member in members_response['items'] if member['member_id'] > 0]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        CHAT_MEMBERS_CACHE[peer_id] = {
            'members': user_ids,
            'timestamp': now
        }
        return user_ids
    except vk_api.ApiError as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ {peer_id}: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∏ –Ω–µ –∫—ç—à–∏—Ä—É–µ–º
        return []


def check_reminders(vk):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —á–∞—Ç–æ–≤)."""
    try:
        conn = sqlite3.connect('bot.db')
        cursor = conn.cursor()
        
        utc_tz = pytz.utc
        now = datetime.now(utc_tz)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ —á–∞—Ç–æ–≤ (peer_id > 2000000000)
        cursor.execute("SELECT id, target_vk_id, setter_vk_id, message, peer_id FROM reminders WHERE due_date <= ? AND sent = 0 AND peer_id > 2000000000", (now,))
        due_reminders = cursor.fetchall()

        for rem in due_reminders:
            rem_id, target_id, setter_id, msg, peer_id = rem
            
            reminder_text = f"üîî [id{target_id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å], –≤–∞–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç [id{setter_id}|–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]: ¬´{msg}¬ª"

            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                send_message(vk, peer_id, reminder_text)
                
                # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞
                cursor.execute("UPDATE reminders SET sent = 1 WHERE id = ?", (rem_id,))
            except Exception as send_error:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ID {rem_id} –≤ —á–∞—Ç {peer_id}: {send_error}")
        
        conn.commit()
        conn.close()
        if due_reminders:
            logging.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(due_reminders)} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —á–∞—Ç–æ–≤.")
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")


def check_ban_votes(vk):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –±–∞–Ω."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö
        for peer_id in list(vote_ban.ACTIVE_VOTES.keys()):
            vote_ban.check_and_finalize_votes(vk, peer_id)
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π: {e}")

def setup_admins(vk, group_id):
    """–ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–µ–ª–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –±–æ—Ç–∞ –≤—Å–µ—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø—ã."""
    try:
        managers = vk.groups.getMembers(group_id=group_id, filter='managers')
        manager_ids = [manager['id'] for manager in managers['items']]
        
        for manager_id in manager_ids:
            set_user_role(manager_id, 'admin')
        
        if manager_ids:
            logging.info(f"–ù–∞–∑–Ω–∞—á–µ–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {len(manager_ids)} —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º.")

    except vk_api.ApiError as e:
        logging.error(f"–û—à–∏–±–∫–∞ VK API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π: {e}")
    except Exception as e:
        logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–æ–≤: {e}")


# === –ì–õ–ê–í–ù–´–ô –¶–ò–ö–õ –û–ë–†–ê–ë–û–¢–ö–ò –°–û–û–ë–©–ï–ù–ò–ô ===
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    load_dotenv()
    vk_token = os.getenv('VK_TOKEN')
    group_id = os.getenv('GROUP_ID')

    if not vk_token or not group_id:
        logging.error("VK_TOKEN –∏ GROUP_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–∫–∞–∑–∞–Ω—ã –≤ .env —Ñ–∞–π–ª–µ.")
        return

    try:
        init_db()
        logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        return

    try:
        vk_session = vk_api.VkApi(token=vk_token)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º VkBotLongPoll –¥–ª—è —Ä–∞–±–æ—Ç—ã –æ—Ç –∏–º–µ–Ω–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º wait –¥–æ 90 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å ReadTimeout
        longpoll = VkBotLongPoll(vk_session, group_id, wait=90)
        vk = vk_session.get_api()
        logging.info("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ VK –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.")
    except Exception as error_msg:
        logging.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ VK: {error_msg}")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—É–ª–¥–∞—É–Ω–æ–≤
    cooldowns.load_cooldown_settings()
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –°–≥–ª—ã–ø—ã
    sglypa.load_sglypa_data()

    # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º –≥—Ä—É–ø–ø—ã
    setup_admins(vk, group_id)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π
    scheduler = BackgroundScheduler(timezone="UTC")
    scheduler.add_job(check_reminders, 'interval', minutes=1, args=[vk])
    scheduler.add_job(check_ban_votes, 'interval', seconds=10, args=[vk])  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    scheduler.start()
    logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω.")

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")

    while True:
        try:
            for event in longpoll.listen():
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º VkBotEventType.MESSAGE_NEW
                    if event.type == VkBotEventType.MESSAGE_NEW:
                        
                        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤
                        if event.obj.message['peer_id'] < 2000000000:
                            continue

                        message_obj = event.obj.message
                        from_id = message_obj.get('from_id')

                        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É event'–∞, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
                        event_for_handler = SimpleNamespace(
                            user_id=from_id,
                            peer_id=message_obj.get('peer_id'),
                            text=message_obj.get('text')
                        )
                        # –î–ª—è –∫–æ–º–∞–Ω–¥, —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —Å –æ—Ç–≤–µ—Ç–∞–º–∏, –Ω–∞–º –Ω—É–∂–µ–Ω –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                        full_message_object = message_obj

                        logging.info(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {event_for_handler.user_id} –≤ —á–∞—Ç–µ {event_for_handler.peer_id}: '{event_for_handler.text}'")
                        
                        message_text = event_for_handler.text
                        user_id = event_for_handler.user_id

                        # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ ---
                        lower_message = message_text.lower().strip()

                        # GROK - –≥–∏–±–∫–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞–ø–∏—Å–∞–Ω–∏—è
                        # –ü–∞—Ç—Ç–µ—Ä–Ω: (–≥—Ä–æ–∫|grok)[,]? (—ç—Ç–æ –ø—Ä–∞–≤–¥–∞|is this true|–ø—Ä–∞–≤–¥–∞|true)[?]?
                        grok_pattern = r'^(–≥—Ä–æ–∫|grok)[,\s]+(—ç—Ç–æ\s+–ø—Ä–∞–≤–¥–∞|is\s+this\s+true|–ø—Ä–∞–≤–¥–∞|true)\??$'
                        if re.match(grok_pattern, lower_message):
                            command_name = "grok"
                            if cooldowns.check_cooldown_and_notify(vk, user_id, event_for_handler.peer_id, command_name):
                                continue
                            ai_commands.grok_ai_command(vk, event.obj.message, [])
                            cooldowns.set_cooldown(user_id, command_name)
                            continue

                        # DOES HE KNOW?
                        if lower_message in ["does he know?", "–∑–Ω–∞–µ—Ç –ª–∏ –æ–Ω?"]:
                            command_name = "doesheknow"
                            if cooldowns.check_cooldown_and_notify(vk, user_id, event_for_handler.peer_id, command_name):
                                continue
                            ai_commands.does_he_know_command(vk, event.obj.message, [])
                            cooldowns.set_cooldown(user_id, command_name)
                            continue

                        # –ì–û–õ–û–°–û–í–ê–ù–ò–ï –ó–ê –ë–ê–ù
                        if lower_message == "—ç—Ç–æ–≥–æ –±–∞–Ω–∏–º –Ω–∞—Ö—É–π":
                            command_name = "ban_vote"
                            if cooldowns.check_cooldown_and_notify(vk, user_id, event_for_handler.peer_id, command_name):
                                continue
                            vote_ban.ban_vote_command(vk, full_message_object, [])
                            cooldowns.set_cooldown(user_id, command_name)
                            continue

                        # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º ---
                        used_prefix = None
                        for prefix in PREFIXES:
                            if message_text.lower().startswith(prefix.lower()):
                                used_prefix = prefix
                                command_body = message_text[len(prefix):].strip()
                                break
                            elif message_text.lower().startswith(prefix + ' '):
                                used_prefix = prefix
                                command_body = message_text[len(prefix):].strip()
                                break

                        if used_prefix is None:
                            continue

                        command_parts = command_body.split()
                        if not command_parts:
                            continue
                        
                        command_name = command_parts[0].lower()
                        args = command_parts[1:]

                        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–æ–≤ (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–æ–≤) ---
                        if get_or_create_user(user_id).get('role') != 'admin':
                            if cooldowns.check_cooldown_and_notify(vk, user_id, event_for_handler.peer_id, command_name):
                                continue

                        command_func = COMMANDS.get(command_name)
                        
                        if command_func:
                            try:
                                # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ ---
                                if command_name in ['–±–ª—ç–∫–¥–∂–µ–∫', '–≤–∑—è—Ç—å', '—Ö–≤–∞—Ç–∏—Ç']:
                                    # –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –Ω—É–∂–µ–Ω event loop
                                    asyncio.run(run_game_command(command_func, event.obj.message))
                                    cooldowns.set_cooldown(user_id, command_name) # –°—Ç–∞–≤–∏–º –∫—É–ª–¥–∞—É–Ω –ø–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞
                                    continue # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ–±—ã—Ç–∏—é

                                # –ö–æ–º–∞–Ω–¥—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞–º–∏ –≤—ã–∑—ã–≤–∞—é—Ç—Å—è –ø–æ-—Ä–∞–∑–Ω–æ–º—É
                                if command_name in ["—à–µ–¥–µ–≤—Ä", "gif"]:
                                    command_func(vk, event_for_handler, args, vk_session)
                                elif command_name in ["rp", "—Å—É–¥—å—è"]:
                                    command_func(vk, vk_session, event_for_handler, args, event.obj.message)
                                elif command_name == "–≥–∏–≥–∞—á–∞—Ç":
                                    # –ì–∏–≥–∞—á–∞—Ç –Ω—É–∂–µ–Ω –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                                    command_func(vk, event.obj.message, args)
                                else: # –î–ª—è '–Ω–µ–π—Ä–æ–Ω–∫–∞' –∏ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
                                    command_func(vk, event_for_handler, args)

                                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                                if get_or_create_user(user_id).get('role') != 'admin':
                                     cooldowns.set_cooldown(user_id, command_name)

                            except Exception as e:
                                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã '{command_name}': {e}", exc_info=True)
                                send_message(vk, event_for_handler.peer_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã '{command_name}'. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω.")
                        else:
                            # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
                            send_message(vk, event_for_handler.peer_id, "–∏–¥–∏ –Ω–∞—Ö—É–π")

                except Exception as e:
                    logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è: {e}", exc_info=True)
                    peer_id = None
                    try:
                        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å peer_id –∏–∑ —Å–æ–±—ã—Ç–∏—è, —á—Ç–æ–±—ã —É–≤–µ–¥–æ–º–∏—Ç—å —á–∞—Ç
                        if event and hasattr(event, 'obj') and hasattr(event.obj, 'message'):
                            peer_id = event.obj.message.get('peer_id')
                    except Exception:
                        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å peer_id
                    
                    if peer_id and vk:
                        try:
                            error_message = f"üí• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ë–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω."
                            send_message(vk, peer_id, error_message)
                        except Exception as notify_error:
                            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ —á–∞—Ç {peer_id}: {notify_error}")

        except Exception as e:
            logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ longpoll.listen() (–≤–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é): {e}", exc_info=True)
            logging.info("–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥...")
            time.sleep(15)


if __name__ == '__main__':
    main()
