import os
import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from dotenv import load_dotenv
import logging
from types import SimpleNamespace
from apscheduler.schedulers.background import BackgroundScheduler
import sqlite3
from datetime import datetime

from database import init_db, set_user_role
from core.utils import get_random_id
from handlers import admin, general, dice, character, reminders, help

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –°–ª–æ–≤–∞—Ä—å –∫–æ–º–∞–Ω–¥
COMMANDS = {
    # –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
    '–ø—Ä–∏–≤–µ—Ç': general.greet,
    '–Ω–∞—á–∞—Ç—å': general.start,
    '–ø–æ–º–æ—â—å': help.help_command,
    # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    '–¥–∞—Ç—å–∞–¥–º–∏–Ω–∫—É': admin.promote_to_admin,
    '—Å–Ω—è—Ç—å–∞–¥–º–∏–Ω–∫—É': admin.demote_to_user,
    '–∞–¥–º–∏–Ω—ã': admin.show_admins,
    '–ø–æ–º–æ—â—å–∞–¥–º–∏–Ω–∞–º': help.admin_help_command,
    # –ò–≥—Ä–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    'roll': dice.roll,
    'r': dice.roll,
    # –ö–æ–º–∞–Ω–¥—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    '–ø–µ—Ä—Å–æ–Ω–∞–∂–∏': character.my_characters,
    '–∏–Ω—Ñ–æ': character.character_info,
    # '–∫—Ä–µ–¥–∏—Ç—ã': character.set_currency, # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
    # –ö–æ–º–∞–Ω–¥—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    '–Ω–∞–ø–æ–º–Ω–∏—Ç—å': reminders.remind_command,
}
PREFIXES = ['sdp', '&']


def check_reminders(vk):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    try:
        conn = sqlite3.connect('bot.db')
        cursor = conn.cursor()
        now = datetime.now()
        
        cursor.execute("SELECT id, target_vk_id, setter_vk_id, message FROM reminders WHERE due_date <= ? AND sent = 0", (now,))
        due_reminders = cursor.fetchall()

        for rem in due_reminders:
            rem_id, target_id, setter_id, msg = rem
            reminder_text = f"üîî [id{setter_id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] –ø—Ä–æ—Å–∏–ª –≤–∞–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å: ¬´{msg}¬ª"
            vk.messages.send(
                user_id=target_id, # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –õ–°
                message=reminder_text,
                random_id=get_random_id()
            )
            # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
            cursor.execute("UPDATE reminders SET sent = 1 WHERE id = ?", (rem_id,))
        
        conn.commit()
        conn.close()
        if due_reminders:
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(due_reminders)} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

def setup_admins(vk, group_id):
    """–ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–µ–ª–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –±–æ—Ç–∞ –≤—Å–µ—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø—ã."""
    try:
        managers = vk.groups.getMembers(group_id=group_id, filter='managers')
        manager_ids = [manager['id'] for manager in managers['items']]
        
        for manager_id in manager_ids:
            set_user_role(manager_id, 'admin')
        
        if manager_ids:
            logging.info(f"–ù–∞–∑–Ω–∞—á–µ–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {len(manager_ids)} —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º.")

    except vk_api.ApiError as e:
        logging.error(f"–û—à–∏–±–∫–∞ VK API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π: {e}")
    except Exception as e:
        logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–æ–≤: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    load_dotenv()
    vk_token = os.getenv('VK_TOKEN')
    group_id = os.getenv('GROUP_ID')

    if not vk_token or not group_id:
        logging.error("VK_TOKEN –∏ GROUP_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–∫–∞–∑–∞–Ω—ã –≤ .env —Ñ–∞–π–ª–µ.")
        return

    try:
        init_db()
        logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        return

    try:
        vk_session = vk_api.VkApi(token=vk_token)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º VkBotLongPoll –¥–ª—è —Ä–∞–±–æ—Ç—ã –æ—Ç –∏–º–µ–Ω–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
        longpoll = VkBotLongPoll(vk_session, group_id)
        vk = vk_session.get_api()
        logging.info("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ VK –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.")
    except Exception as error_msg:
        logging.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ VK: {error_msg}")
        return
    
    # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    setup_admins(vk, group_id)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    scheduler = BackgroundScheduler(timezone="Europe/Moscow")
    scheduler.add_job(check_reminders, 'interval', minutes=1, args=[vk])
    scheduler.start()
    logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω.")

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")

    for event in longpoll.listen():
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º VkBotEventType.MESSAGE_NEW
        if event.type == VkBotEventType.MESSAGE_NEW:
            message = event.obj.message
            
            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É event'–∞, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            event_for_handler = SimpleNamespace(
                user_id=message['from_id'],
                peer_id=message['peer_id'],
                text=message['text']
            )

            logging.info(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {event_for_handler.user_id} –≤ —á–∞—Ç–µ {event_for_handler.peer_id}: '{event_for_handler.text}'")
            
            message_text = event_for_handler.text.strip()
            
            used_prefix = None
            for prefix in PREFIXES:
                if message_text.lower().startswith(prefix) and not prefix.endswith(' '):
                    used_prefix = prefix
                    command_body = message_text[len(prefix):].strip()
                    break
                elif message_text.lower().startswith(prefix + ' '):
                    used_prefix = prefix
                    command_body = message_text[len(prefix):].strip()
                    break

            if used_prefix is None:
                continue

            command_parts = command_body.split()
            command = command_parts[0].lower()
            args = command_parts[1:]
            
            handler = COMMANDS.get(command)
            if handler:
                try:
                    handler(vk, event_for_handler, args)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã '{command}': {e}")
                    vk.messages.send(
                        peer_id=event_for_handler.peer_id,
                        message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.",
                        random_id=get_random_id()
                    )
            else:
                 vk.messages.send(
                    peer_id=event_for_handler.peer_id,
                    message="–Ø –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å 'sdp –ø—Ä–∏–≤–µ—Ç' –∏–ª–∏ '&–Ω–∞—á–∞—Ç—å'.",
                    random_id=get_random_id()
                )

if __name__ == '__main__':
    main()
