import os
import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from dotenv import load_dotenv
import logging
from types import SimpleNamespace
from apscheduler.schedulers.background import BackgroundScheduler
import sqlite3
from datetime import datetime
import pytz
import random
import re
import time

from database import init_db, set_user_role
from core.utils import get_random_id, send_message
from handlers import admin, general, dice, character, reminders, help, gifs, handbook
from core import cooldowns, sglypa

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –°–ª–æ–≤–∞—Ä—å –∫–æ–º–∞–Ω–¥
COMMANDS = {
    'start': general.start,
    '–Ω–∞—á–∞—Ç—å': general.start,
    '–ø–∏–≤–æ': general.beer_command,
    'roll': dice.roll,
    'r': dice.roll,
    '–Ω–∞–ø–æ–º–Ω–∏—Ç—å': reminders.remind_command,
    '–ø–µ—Ä—Å–æ–Ω–∞–∂–∏': character.my_characters,
    '–∏–Ω—Ñ–æ': character.character_info,
    '–ø–æ–º–æ—â—å': help.help_command,
    'gif': gifs.get_gif,
    '—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫': handbook.handbook_command,
    # –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã
    '–¥–∞—Ç—å–∞–¥–º–∏–Ω–∫—É': admin.promote_to_admin,
    '—Å–Ω—è—Ç—å–∞–¥–º–∏–Ω–∫—É': admin.demote_to_user,
    '–∞–¥–º–∏–Ω—ã': admin.show_admins,
    '–ø–æ–º–æ—â—å–∞–¥–º–∏–Ω–∞–º': help.admin_help_command,
    'setcd': admin.set_cooldown_command,
    'cd': admin.list_cooldowns_command,
    'sglypa': admin.sglypa_mode_command
}
PREFIXES = ['sdp', '&']

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –±–æ—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Å–∞–º–æ–≥–æ —Å–µ–±—è
GROUP_ID_STR = os.getenv("GROUP_ID")
BOT_ID = -int(GROUP_ID_STR) if GROUP_ID_STR and GROUP_ID_STR.isdigit() else None


# --- –ö—ç—à —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ ---
CHAT_MEMBERS_CACHE = {}
CACHE_LIFETIME_SECONDS = 600 # 10 –º–∏–Ω—É—Ç

def get_chat_members(vk, peer_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫—ç—à."""
    now = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if peer_id in CHAT_MEMBERS_CACHE:
        cache_entry = CHAT_MEMBERS_CACHE[peer_id]
        if now - cache_entry['timestamp'] < CACHE_LIFETIME_SECONDS:
            return cache_entry['members']

    # –ï—Å–ª–∏ –≤ –∫—ç—à–µ –Ω–µ—Ç –∏–ª–∏ –æ–Ω —É—Å—Ç–∞—Ä–µ–ª, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
    try:
        members_response = vk.messages.getConversationMembers(peer_id=peer_id)
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ–Ω–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ)
        user_ids = [member['member_id'] for member in members_response['items'] if member['member_id'] > 0]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        CHAT_MEMBERS_CACHE[peer_id] = {
            'members': user_ids,
            'timestamp': now
        }
        return user_ids
    except vk_api.ApiError as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ {peer_id}: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∏ –Ω–µ –∫—ç—à–∏—Ä—É–µ–º
        return []


def check_reminders(vk):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —á–∞—Ç–æ–≤)."""
    try:
        conn = sqlite3.connect('bot.db')
        cursor = conn.cursor()
        
        utc_tz = pytz.utc
        now = datetime.now(utc_tz)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ —á–∞—Ç–æ–≤ (peer_id > 2000000000)
        cursor.execute("SELECT id, target_vk_id, setter_vk_id, message, peer_id FROM reminders WHERE due_date <= ? AND sent = 0 AND peer_id > 2000000000", (now,))
        due_reminders = cursor.fetchall()

        for rem in due_reminders:
            rem_id, target_id, setter_id, msg, peer_id = rem
            
            reminder_text = f"üîî [id{target_id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å], –≤–∞–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç [id{setter_id}|–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]: ¬´{msg}¬ª"

            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                send_message(vk, peer_id, reminder_text)
                
                # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞
                cursor.execute("UPDATE reminders SET sent = 1 WHERE id = ?", (rem_id,))
            except Exception as send_error:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ID {rem_id} –≤ —á–∞—Ç {peer_id}: {send_error}")
        
        conn.commit()
        conn.close()
        if due_reminders:
            logging.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(due_reminders)} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —á–∞—Ç–æ–≤.")
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

def setup_admins(vk, group_id):
    """–ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–µ–ª–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –±–æ—Ç–∞ –≤—Å–µ—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø—ã."""
    try:
        managers = vk.groups.getMembers(group_id=group_id, filter='managers')
        manager_ids = [manager['id'] for manager in managers['items']]
        
        for manager_id in manager_ids:
            set_user_role(manager_id, 'admin')
        
        if manager_ids:
            logging.info(f"–ù–∞–∑–Ω–∞—á–µ–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {len(manager_ids)} —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º.")

    except vk_api.ApiError as e:
        logging.error(f"–û—à–∏–±–∫–∞ VK API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π: {e}")
    except Exception as e:
        logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–æ–≤: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    load_dotenv()
    vk_token = os.getenv('VK_TOKEN')
    group_id = os.getenv('GROUP_ID')

    if not vk_token or not group_id:
        logging.error("VK_TOKEN –∏ GROUP_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–∫–∞–∑–∞–Ω—ã –≤ .env —Ñ–∞–π–ª–µ.")
        return

    try:
        init_db()
        logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        return

    try:
        vk_session = vk_api.VkApi(token=vk_token)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º VkBotLongPoll –¥–ª—è —Ä–∞–±–æ—Ç—ã –æ—Ç –∏–º–µ–Ω–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
        longpoll = VkBotLongPoll(vk_session, group_id)
        vk = vk_session.get_api()
        logging.info("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ VK –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.")
    except Exception as error_msg:
        logging.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ VK: {error_msg}")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—É–ª–¥–∞—É–Ω–æ–≤
    cooldowns.load_cooldown_settings()
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –°–≥–ª—ã–ø—ã
    sglypa.load_sglypa_data()

    # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º –≥—Ä—É–ø–ø—ã
    setup_admins(vk, group_id)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    scheduler = BackgroundScheduler(timezone="UTC")
    scheduler.add_job(check_reminders, 'interval', minutes=1, args=[vk])
    scheduler.start()
    logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω.")

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")

    for event in longpoll.listen():
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º VkBotEventType.MESSAGE_NEW
        if event.type == VkBotEventType.MESSAGE_NEW:
            
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤
            if event.obj.message['peer_id'] < 2000000000:
                continue

            message_obj = event.obj.message
            from_id = message_obj.get('from_id')

            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É event'–∞, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            event_for_handler = SimpleNamespace(
                user_id=from_id,
                peer_id=event.obj.message['peer_id'],
                text=event.obj.message['text']
            )

            logging.info(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {event_for_handler.user_id} –≤ —á–∞—Ç–µ {event_for_handler.peer_id}: '{event_for_handler.text}'")
            
            message_text = event_for_handler.text
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞
            is_command = False
            for prefix in PREFIXES:
                if message_text.lower().startswith(prefix):
                    is_command = True
                    break
            
            # –ï—Å–ª–∏ —Ä–µ–∂–∏–º –°–≥–ª—ã–ø—ã –≤–∫–ª—é—á–µ–Ω –¥–ª—è —á–∞—Ç–∞
            if event_for_handler.peer_id in sglypa.SGLYPA_MODE_CHATS:
                # --- –õ–æ–≥–∏–∫–∞ –°–≥–ª—ã–ø—ã ---
                # –û–Ω–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ù–ï –∫–æ–º–∞–Ω–¥–∞
                if not is_command:
                    is_from_bot = (from_id == BOT_ID)
                    # –ü—Ä–æ—Å—Ç–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫, –ø–æ—Ö–æ–∂–∏—Ö –Ω–∞ –ª–æ–≥–∏
                    is_log_message = bool(re.match(r'^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}', message_text))

                    # –£—á–∏–º—Å—è –∏ –æ—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ª—é–¥–µ–π, –Ω–µ –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ –ª–æ–≥–∏
                    if not is_from_bot and not is_log_message:
                        
                        # --- –õ–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –°–≥–ª—ã–ø—ã ---
                        
                        # 1. –° –Ω–µ–∫–æ—Ç–æ—Ä–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –æ—Ç–≤–µ—á–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ—Ä–∞–∑–æ–π
                        if random.random() < 0.2: # 20% —à–∞–Ω—Å –æ—Ç–≤–µ—Ç–∞
                            response = sglypa.generate_response(event_for_handler.peer_id)
                            if response:
                                send_message(vk, event_for_handler.peer_id, response)

                        # 2. –° –¥—Ä—É–≥–æ–π, –º–µ–Ω—å—à–µ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é, –∫–∏–¥–∞–µ–º "–ø–æ–¥–∫–æ–ª"
                        if random.random() < 0.05: # 1% —à–∞–Ω—Å
                            members = get_chat_members(vk, event_for_handler.peer_id)
                            if members:
                                random_member_id = random.choice(members)
                                troll_message = f"–Ø –∑–Ω–∞—é, —á—Ç–æ [id{random_member_id}|–¢—ã] –¥—Ä–æ—á–∏—à—å."
                                send_message(vk, event_for_handler.peer_id, troll_message)
                        
                        # 3. –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ —Å—Ä–∞–∑—É –æ–±—É—á–∞–µ–º—Å—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–∏
                        if message_text:
                            sglypa.build_model(event_for_handler.peer_id, [message_text])

                    continue # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é, —Ç.–∫. —ç—Ç–æ –±—ã–ª–æ –Ω–µ-–∫–æ–º–∞–Ω–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

            # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–µ
            if is_command:
                used_prefix = None
                for prefix in PREFIXES:
                    if message_text.lower().startswith(prefix) and not prefix.endswith(' '):
                        used_prefix = prefix
                        command_body = message_text[len(prefix):].strip()
                        break
                    elif message_text.lower().startswith(prefix + ' '):
                        used_prefix = prefix
                        command_body = message_text[len(prefix):].strip()
                        break

                if used_prefix is None:
                    continue

                command_parts = command_body.split()
                command = command_parts[0].lower()
                args = command_parts[1:]
                
                command_func = COMMANDS.get(command)
                
                if command_func:
                    # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏ –Ω–µ –∏–º–µ—é—Ç –∫—É–ª–¥–∞—É–Ω–∞
                    is_admin_command = command_func in [
                        admin.promote_to_admin, admin.demote_to_user, admin.show_admins, 
                        help.admin_help_command, admin.set_cooldown_command, admin.list_cooldowns_command
                    ]
                    
                    if not is_admin_command:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
                        remaining_time = cooldowns.check_cooldown(event_for_handler.user_id, command)
                        if remaining_time > 0:
                            send_message(
                                vk,
                                event_for_handler.peer_id,
                                f"‚è≥ –ö–æ–º–∞–Ω–¥–∞ `{command}` –Ω–∞ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {remaining_time} —Å–µ–∫."
                            )
                            continue # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã

                    try:
                        # –ü–µ—Ä–µ–¥–∞–µ–º vk_session –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–º —ç—Ç–æ –Ω—É–∂–Ω–æ
                        if command_func == gifs.get_gif:
                            command_func(vk, event_for_handler, args, vk_session=vk_session)
                        else:
                            command_func(vk, event_for_handler, args)
                        
                        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω
                        if not is_admin_command:
                            cooldowns.set_cooldown(event_for_handler.user_id, command)

                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã '{command}': {e}")
                        send_message(
                            vk,
                            event_for_handler.peer_id,
                            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω."
                        )
                else:
                    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
                    send_message(vk, event_for_handler.peer_id, "–∏–¥–∏ –Ω–∞—Ö—É–π")

if __name__ == '__main__':
    main()
