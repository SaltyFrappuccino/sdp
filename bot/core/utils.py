import random
import vk_api
import logging
from vk_api.vk_api import VkApiMethod

MAX_MESSAGE_LENGTH = 4000 # –ù–µ–º–Ω–æ–≥–æ –º–µ–Ω—å—à–µ –ª–∏–º–∏—Ç–∞ VK (4096) –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏

def get_random_id():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π ID –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è VK."""
    return random.getrandbits(31) * random.choice([-1, 1])

def send_message(vk: VkApiMethod, peer_id: int, message: str, **kwargs):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–∏–≤–∞—è –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç.
    """
    try:
        if len(message) <= MAX_MESSAGE_LENGTH:
            vk.messages.send(peer_id=peer_id, message=message, random_id=get_random_id(), **kwargs)
            return

        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ {peer_id} —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –†–∞–∑–±–∏–≤–∞—é –Ω–∞ —á–∞—Å—Ç–∏.")
        
        parts = []
        remaining_message = message
        while len(remaining_message) > 0:
            if len(remaining_message) <= MAX_MESSAGE_LENGTH:
                parts.append(remaining_message)
                break
            
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ä–∞–∑—Ä—ã–≤–∞
            split_index = remaining_message.rfind('\n', 0, MAX_MESSAGE_LENGTH)
            
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏ –Ω–µ—Ç, –∏–ª–∏ –æ–Ω –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, —Ä–µ–∂–µ–º –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–µ
            if split_index <= 0:
                split_index = MAX_MESSAGE_LENGTH
            
            parts.append(remaining_message[:split_index])
            remaining_message = remaining_message[split_index:].lstrip()

        for i, part in enumerate(parts):
            if part:
                header = f"üìÑ –ß–∞—Å—Ç—å {i + 1}/{len(parts)}\n"
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—Ç–∞–Ω–µ—Ç –ª–∏ —á–∞—Å—Ç—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–π
                if len(header) + len(part) > MAX_MESSAGE_LENGTH:
                    # –ï—Å–ª–∏ –¥–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞. –≠—Ç–æ –∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π
                    final_message = part
                else:
                    final_message = header + part
                
                vk.messages.send(peer_id=peer_id, message=final_message, random_id=get_random_id(), **kwargs)

    except vk_api.exceptions.ApiError as e:
        logging.error(f"–û—à–∏–±–∫–∞ VK API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {peer_id}: {e}")
    except Exception as e:
        logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {peer_id}: {e}")
